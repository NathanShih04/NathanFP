{
  
    
        "post0": {
            "title": "Title",
            "content": "class TurtleLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] turtles; /** * Constructor initializes a 2D array of Turtles */ public TurtleLoop() { //Storing Data in 2D arrays turtles = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Turtle 0 { &quot; __ &quot;, //[0][0] eyes &quot; &#39;_&#39;) &quot;, //[0][1] head &quot; (. &quot;, //[0][2] neck/top of shell &quot; (( )___ &quot;, //[0][3] shell &quot; //- BOB THE WEAPONS SPECIALIST&quot; //[0][4] legs }, //Turtle 1 { &quot; ___&quot;, //[1][0] &quot; ,+&#39;/. &#39;+, ___ &quot;, //[1][1] &quot; / _/ _/ _/ ,+&#39; * &quot;, //[1][2] &quot; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ &quot;, //[1][3] &quot; /_/&#39;-&#39; _ GEOFF THE AQUATICS EXPERT&quot; //[1][4] }, //Turtle 2 { &quot; _&quot;, //[2][0] &quot; .-./*) &quot;, //[2][1] &quot; _/___ / &quot;, //[2][2] &quot; U U MOE THE STEALTH MASTER&quot; //[2][3] }, //Turtle 3 { &quot; ___&quot;, //[3][0] &quot; ,, // &quot;, //[3][1] &quot; (_, / _/ &quot;, //[3][2] &quot; _/_ _/&gt; &quot;, //[3][3] &quot; /_/ /_/ MELISSA THE COMPUTER WHIZ&quot; //[3][4] }, //Turtle 4 { &quot; _____&quot;, //[4][0] &quot; oo/&gt;&lt;&gt;&lt;&gt; &quot;, //[4][1] &quot;( -)&gt;&lt;&gt;&lt;&gt;&lt;&gt;&quot;, //[4][2] &quot; L|_|L|_|` JEFF THE COMBATANT&quot; //[4][3] }, }; } /** * Loop and print turtles in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;The Tragedy of the turtle squad&quot;); // turtles (non-primitive) defined in constructor knows its length int turtleCount = turtles.length; for (int i = turtleCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of Turtles // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; turtle squad members left&quot;); //how many separate parts are there in a turtle turtle? for (int row = 0; row &lt; turtleCount; row++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each turtle part by part, will eventually print entire column*/ for (int col = 0; col &lt; turtles[row].length; col++) { // prints specific part of the turtle from the column System.out.print(turtles[row][col] + &quot; &quot;); //this is new line between separate parts System.out.println(); } //this new line gives separation between each turtle System.out.println(); } //countdown for poem, decrementing turtleCount variable by 1 turtleCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;That was the tragedy of the turtle squad :(&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new TurtleLoop().printPoem(); //a new monkey list and output in one step } } TurtleLoop.main(null); . The Tragedy of the turtle squad 5 turtle squad members left __ &#39;_&#39;) (. (( )___ //- BOB THE WEAPONS SPECIALIST ___ ,+&#39;/. &#39;+, ___ / _/ _/ _/ ,+&#39; * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ /_/&#39;-&#39; _ GEOFF THE AQUATICS EXPERT _ .-./*) _/___ / U U MOE THE STEALTH MASTER ___ ,, // (_, / _/ _/_ _/&gt; /_/ /_/ MELISSA THE COMPUTER WHIZ _____ oo/&gt;&lt;&gt;&lt;&gt; ( -)&gt;&lt;&gt;&lt;&gt;&lt;&gt; L|_|L|_|` JEFF THE COMBATANT 4 turtle squad members left __ &#39;_&#39;) (. (( )___ //- BOB THE WEAPONS SPECIALIST ___ ,+&#39;/. &#39;+, ___ / _/ _/ _/ ,+&#39; * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ /_/&#39;-&#39; _ GEOFF THE AQUATICS EXPERT _ .-./*) _/___ / U U MOE THE STEALTH MASTER ___ ,, // (_, / _/ _/_ _/&gt; /_/ /_/ MELISSA THE COMPUTER WHIZ 3 turtle squad members left __ &#39;_&#39;) (. (( )___ //- BOB THE WEAPONS SPECIALIST ___ ,+&#39;/. &#39;+, ___ / _/ _/ _/ ,+&#39; * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ /_/&#39;-&#39; _ GEOFF THE AQUATICS EXPERT _ .-./*) _/___ / U U MOE THE STEALTH MASTER 2 turtle squad members left __ &#39;_&#39;) (. (( )___ //- BOB THE WEAPONS SPECIALIST ___ ,+&#39;/. &#39;+, ___ / _/ _/ _/ ,+&#39; * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ /_/&#39;-&#39; _ GEOFF THE AQUATICS EXPERT 1 turtle squad members left __ &#39;_&#39;) (. (( )___ //- BOB THE WEAPONS SPECIALIST That was the tragedy of the turtle squad :( 0000000000000000000000000000000000 .",
            "url": "https://nathanshih04.github.io/NathanFP/2022/09/16/nathan-monkeys.html",
            "relUrl": "/2022/09/16/nathan-monkeys.html",
            "date": " • Sep 16, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Nathan Compliments Extra Notebook",
            "content": "import java.util.Scanner; . class Compliments { // Function that uses if, else if, and else to decide which compliment to print out. public void nice(int choice){ if(choice == 1){ System.out.println(&quot;You&#39;re pretty!&quot;); } else if(choice == 2){ System.out.println(&quot;You&#39;re strong!&quot;); } else if(choice == 3){ System.out.println(&quot;You&#39;re cool!&quot;); } else if(choice == 4){ System.out.println(&quot;You&#39;re smart!&quot;); } else{ System.out.println(&quot;You did not choose an option for a random compliment!&quot;); } } // Function that is converted to switch, case, and other to decide which insult to print out. public void mean(int choice){ switch(choice){ case 1: System.out.println(&quot;You&#39;re ugly!&quot;); break; case 2: System.out.println(&quot;You&#39;re weak!&quot;); break; case 3: System.out.println(&quot;You&#39;re lame!&quot;); break; case 4: System.out.println(&quot;You&#39;re dumb!&quot;); break; case 5: System.out.println(&quot;くコ:彡&quot;); break; default: System.out.println(&quot;You did not choose an option for a random insult!&quot;); } } } . // Objects created for Compliments class and Scanner for user input Compliments comp = new Compliments(); Scanner scan = new Scanner(System.in); // Prompts user to choose whether or not they want a compliment or insult and changes it into a boolean System.out.println(&quot;Input 1 for a compliment and anything else for an insult: &quot;); int compOrInsult = Integer.parseInt(scan.nextLine()); boolean decision; // compliment if(compOrInsult == 1){ decision = true; } // insult else{ decision = false; } // code block to prompt user to choose a random compliment if(decision){ System.out.println(&quot;Input 1-4 for a random compliment: &quot;); int rand = Integer.parseInt(scan.nextLine()); System.out.println(&quot;This was printed using if-elseif-else: &quot;); comp.nice(rand); } // code block to prompt user to choose a random insult else if(!decision){ System.out.println(&quot;Input 1-4 for a random compliment: &quot;); int rand = Integer.parseInt(scan.nextLine()); System.out.println(&quot;This was printed using switch-case-otherwise: &quot;); comp.mean(rand); } . Input 1 for a compliment and anything else for an insult: Input 1-4 for a random compliment: This was printed using if-elseif-else: You&#39;re cool! .",
            "url": "https://nathanshih04.github.io/NathanFP/2022/09/11/nathan-compliments.html",
            "relUrl": "/2022/09/11/nathan-compliments.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Focus & Habits",
            "content": "Psychology and the Good Life . State of mind and quality of life have always been important to me throughout life. I believe that finding satisfaction in life is through balance. I know everything won&#39;t be rainbow and butterflies and there will definitely be hardship and struggle but I know that at least some aspects of life can be rainbow and butterflies. It all comes down to balance and I seek to have a positive outlook on life and enjoy every minute that I&#39;m on it. CODE CODE CODE! . Ways to Reduce Stress . I reduce stress by hopping on youtube and watching videos about fishing, cars, and a bunch of random stuff on the internet. Going down the rabbit holes of youtube is always fun for me and find myself watching videos about scaring goats for hours and hours. I also enjoy going outside and being in nature. Nothing really matters in nature except connecting with the outdoors and going back to our primal roots. However, the biggest stress reliever is going to the gym. All the anger that I have at stupid school is targetted into each rep at the gym. Each pound lifted is equivalent to each part of my immeasurable sadness that school and college apps give me. Each time I punch the bag at the gym is a direct hit at my crippling depression that Calculus BC gave me. . Positive Outlook . The key to find positivity in life is to seek the good and never stop loving turtles. :))))))))) .",
            "url": "https://nathanshih04.github.io/NathanFP/2022/09/11/focus&habits.html",
            "relUrl": "/2022/09/11/focus&habits.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Nathan Bool and If Statements Notebook",
            "content": "if statement runs the code contained inside if the condition inside of the statement is satisfied . // set up variable boolean lights = true; // if the lights is set to true, it will print the statement if(lights == true){ System.out.println(&quot;The lights are on!&quot;); } // another way of doing the same thing using boolean expressions if(lights){ System.out.println(&quot;The lights are on!&quot;); } . The lights are on! The lights are on! . if-else statement runs the if statment first, but if that condition is not met, it will run whatever is in the else statement . // set up variable boolean lights = false; // if the lights is set to true, it will print the statement. Else the lights are off. if(lights == true){ System.out.println(&quot;The lights are on!&quot;); } else{ System.out.println(&quot;The lights are off!&quot;); } // another way of doing the same thing using boolean expressions (if lights are not false, meaning they are true) if(lights != false){ System.out.println(&quot;The lights are on!&quot;); } else{ System.out.println(&quot;The lights are off!&quot;); } . The lights are off! The lights are off! . if-elseif-else first checks to see if the if statement condition is met. If not, it will go through all else ifs and check until one of those conditions are met. If neither the if and else if statements are met, it will run the else statement. . // Setting variables to demonstrate if, else if, and else. boolean lights = true; boolean fan = true; // First checks if statement if(lights &amp;&amp; !fan){ System.out.println(&quot;The lights are on and the fan is off!&quot;); } // Goes down else ifs else if(!lights &amp;&amp; fan){ System.out.println(&quot;The lights are off and the fan is on!&quot;); } else if(!lights &amp;&amp; !fan){ System.out.println(&quot;The lights are off and the fan is off!&quot;); } else if(!lights || !fan){ System.out.println(&quot;Either the lights are off or the fan is off!&quot;); } // If none of the above run, else block will run else{ System.out.println(&quot;Both the lights and fan must be on!&quot;); } . Both the lights and fan must be on! . De Morgan&#39;s Law shows how we can remove an &amp;&amp; statement or remove an || statement. It&#39;s the way of creating equivalent statements by switching the &amp;&amp; or || and distributing the ! sign if you need. . // First demonstration System.out.println(&quot;First Demonstration:&quot;); boolean lights = true; boolean fan = true; // first way if(!(lights &amp;&amp; fan)){ System.out.println(&quot;Something is off!&quot;); } // second way if(!lights || !fan){ System.out.println(&quot;Something is off!&quot;); } // if one of the variables is set to true else{ System.out.println(&quot;Everything is on!&quot;); } // Second demonstration System.out.println(&quot;Second Demonstration:&quot;); boolean sink = false; boolean shower = false; // first way if(!(sink || shower)){ System.out.println(&quot;Everything is off!&quot;); } // second way if(!sink &amp;&amp; !shower){ System.out.println(&quot;Everything is off!&quot;); } else{ System.out.println(&quot;Something is on!&quot;); } // third demonstration System.out.println(&quot;Third Demonstration: &quot;); int num1 = 3; int num2 = 10; // first way System.out.println(!(num1 == 5 &amp;&amp; num2 != 5)); // second way System.out.println(num1 != 5 || num2 == 5); // Weird and confusing System.out.println(&quot;Overly complicated for no reason:&quot;); if((lights || !fan) || (sink &amp;&amp; shower)){ System.out.println(&quot;Either lights are on or fan is off, or sink and shower are on.&quot;); } . First Demonstration: Everything is on! Second Demonstration: Everything is off! Everything is off! Third Demonstration: true true Overly complicated for no reason: Either lights are on or fan is off, or sink and shower are on. .",
            "url": "https://nathanshih04.github.io/NathanFP/2022/09/10/nathan-boolandif.html",
            "relUrl": "/2022/09/10/nathan-boolandif.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Nathan Java Object Menu",
            "content": "import java.util.Scanner; import java.lang.Math; import java.util.Random; . class Guesser { public Guesser(){ this.playGame(); } // Random Number to 100 boolean check = false; Random rand = new Random(); int answer = rand.nextInt(100); public static void main(String[] args){ Guesser guessGame = new Guesser(); } // Function that checks whether or not the guess was correct public boolean checker(int guess, int ans){ if(guess == ans){ check = true; } return check; } public void playGame(){ Scanner scan = new Scanner(System.in); System.out.println(&quot;Input your guess: &quot;); int inp = Integer.parseInt(scan.nextLine()); boolean output = checker(inp, answer); while(output == false){ if(inp == 0){ break; } if(inp &lt; answer){ System.out.println(&quot;Wrong, you guessed &quot; + inp + &quot;, guess higher silly goose!&quot;); } if(inp &gt; answer){ System.out.println(&quot;Wrong, guessed &quot; + inp + &quot;, lower silly goose!&quot;); } System.out.println(&quot;Input your guess again: &quot;); inp = Integer.parseInt(scan.nextLine()); output = checker(inp, answer); } System.out.println(&quot;You got it right! The answer was: &quot; + answer); } } . class FlipCoin { public void coinFlip(int count){ Random rando = new Random(); for(int i = 0; i &lt; count; i++){ int side = rando.nextInt(2); if(side == 1){ System.out.println(&quot;Heads&quot;); } else{ System.out.println(&quot;Tails&quot;); } } } } . class Animals { // Function that uses if, else if, and else to decide which animal to print out. public void ifs(int choice){ // checks if statement first if(choice == 1){ System.out.println(&quot;ʕ •ᴥ•ʔ&quot;); } // runs down if else statement list else if(choice == 2){ System.out.println(&quot;εїз&quot;); } else if(choice == 3){ System.out.println(&quot;(=•́ܫ•̀=)&quot;); } else if(choice == 4){ System.out.println(&quot;˄·͈༝·͈˄&quot;); } else if(choice == 5){ System.out.println(&quot;くコ:彡&quot;); } // runs else block if nothing applies above else{ System.out.println(&quot;You did not choose an option for an animal :(&quot;); } } // Function that is converted to switch, case, and other to decide which animal to print out. public void switches(int choice){ // takes in choice and chooses the case based off of it switch(choice){ case 1: System.out.println(&quot;ʕ •ᴥ•ʔ&quot;); break; case 2: System.out.println(&quot;εїз&quot;); break; case 3: System.out.println(&quot;(=•́ܫ•̀=)&quot;); break; case 4: System.out.println(&quot;˄·͈༝·͈˄&quot;); break; case 5: System.out.println(&quot;くコ:彡&quot;); break; // Otherwise case: same as else default: System.out.println(&quot;You did not choose an option for an animal :(&quot;); } } } . class Turtle{ public void weight(int weight){ System.out.println(&quot;I weigh &quot; + weight + &quot; pounds!&quot;); } public void name(String name){ System.out.println(&quot;My name is &quot; + name + &quot;!&quot;); } } . class RussianTort extends Turtle{ public void terrain(){ System.out.println(&quot;I live on land!&quot;); } } . public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Number guessing game&quot;); System.out.println(&quot;2 - Coinflipper&quot;); System.out.println(&quot;3 - Loading in color&quot;); System.out.println(&quot;4 - Learn about Shellby&quot;); System.out.println(&quot;5 - See animals&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: Guesser guess = new Guesser(); guess.playGame(); break; case 2: FlipCoin flip = new FlipCoin(); int flips = 10; flip.coinFlip(flips); break; case 3: System.out.print(&quot;Loading...&quot;); for (int i = 0; i &lt; 20; i++) { // fixed length loading bar int random = (int) (Math.random() * COLORS.length); // random logic try { Thread.sleep(100); // delay for loading } catch (Exception e) { System.out.println(e); } System.out.print(COLORS[random][ANSI] + &quot;#&quot;); } break; case 4: RussianTort shellby = new RussianTort(); shellby.weight(1); shellby.name(&quot;Shellby&quot;); shellby.terrain(); break; case 5: Scanner animal = new Scanner(System.in); System.out.println(&quot;Input 1 for koala, 2 for butterfly, 3 for cat, 4 for bird, and 5 for squid: &quot;); int animalChoice = Integer.parseInt(animal.nextLine()); Animals animalObj = new Animals(); System.out.println(&quot;This was printed using if-elseif-else: &quot;); animalObj.ifs(animalChoice); System.out.println(&quot;This was printed using switch-case-otherwise: &quot;); animalObj.switches(animalChoice); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Number guessing game 2 - Coinflipper 3 - Loading in color 4 - Learn about Shellby 5 - See animals 0 - Quit - 5: Input 1 for koala, 2 for butterfly, 3 for cat, 4 for bird, and 5 for squid: This was printed using if-elseif-else: ʕ •ᴥ•ʔ This was printed using switch-case-otherwise: ʕ •ᴥ•ʔ 5: Input 1 for koala, 2 for butterfly, 3 for cat, 4 for bird, and 5 for squid: This was printed using if-elseif-else: εїз This was printed using switch-case-otherwise: εїз 5: Input 1 for koala, 2 for butterfly, 3 for cat, 4 for bird, and 5 for squid: This was printed using if-elseif-else: (=•́ܫ•̀=) This was printed using switch-case-otherwise: (=•́ܫ•̀=) 5: Input 1 for koala, 2 for butterfly, 3 for cat, 4 for bird, and 5 for squid: This was printed using if-elseif-else: ˄·͈༝·͈˄ This was printed using switch-case-otherwise: ˄·͈༝·͈˄ 5: Input 1 for koala, 2 for butterfly, 3 for cat, 4 for bird, and 5 for squid: This was printed using if-elseif-else: くコ:彡 This was printed using switch-case-otherwise: くコ:彡 5: Input 1 for koala, 2 for butterfly, 3 for cat, 4 for bird, and 5 for squid: This was printed using if-elseif-else: You did not choose an option for an animal :( This was printed using switch-case-otherwise: You did not choose an option for an animal :( 0: Goodbye, World! .",
            "url": "https://nathanshih04.github.io/NathanFP/2022/09/02/nathan-javaobject.html",
            "relUrl": "/2022/09/02/nathan-javaobject.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "College Board Info",
            "content": "Week 3: Backend Development . If Statement and Boolean NB, If Statement and Switch Case Integrated Into Menu NB, and Extra Compliment Code Demonstrating If and Switch NB . Week 2: Innovation Using Objects . Object Menu NB . Week 1: Primitive Types . Primitive Type NB .",
            "url": "https://nathanshih04.github.io/NathanFP/2022/08/28/nathan-CollegeBoard.html",
            "relUrl": "/2022/08/28/nathan-CollegeBoard.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Bash Stuff",
            "content": "realpath . jupyter kernelspec list python --version conda --version . /home/nathanshih04/NathanFP/_notebooks Available kernels: bash /home/nathanshih04/.local/share/jupyter/kernels/bash java /home/nathanshih04/.local/share/jupyter/kernels/java javascript /home/nathanshih04/.local/share/jupyter/kernels/javascript python3 /home/nathanshih04/.local/share/jupyter/kernels/python3 Python 3.9.12 conda 4.13.0 .",
            "url": "https://nathanshih04.github.io/NathanFP/jupyter/2022/08/25/nathan-pythonBash.html",
            "relUrl": "/jupyter/2022/08/25/nathan-pythonBash.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Java Primitive Guesser Game",
            "content": "import java.util.Scanner; import java.util.Random; . public class Guesser{ public Guesser(){ this.playGame(); } // Random Number to 100 boolean check = false; Random rand = new Random(); int answer = rand.nextInt(100); public static void main(String[] args){ Guesser guessGame = new Guesser(); } // Function that checks whether or not the guess was correct public boolean checker(int guess, int ans){ if(guess == ans){ check = true; } return check; } public void playGame(){ Scanner scan = new Scanner(System.in); System.out.println(&quot;Input your guess: &quot;); int inp = Integer.parseInt(scan.nextLine()); boolean output = checker(inp, answer); while(output == false){ if(inp &lt; answer){ System.out.println(&quot;Wrong, guess higher silly goose!&quot;); } if(inp &gt; answer){ System.out.println(&quot;Wrong, guess lower silly goose!&quot;); } System.out.println(&quot;Input your guess again: &quot;); inp = Integer.parseInt(scan.nextLine()); output = checker(inp, answer); } System.out.println(&quot;You got it right! The answer was: &quot; + answer); } } Guesser.main(null); . Input your guess: Wrong, guess higher silly goose! Input your guess again: Wrong, guess higher silly goose! Input your guess again: Wrong, guess higher silly goose! Input your guess again: Wrong, guess lower silly goose! Input your guess again: Wrong, guess higher silly goose! Input your guess again: Wrong, guess higher silly goose! Input your guess again: Wrong, guess lower silly goose! Input your guess again: Wrong, guess lower silly goose! Input your guess again: You got it right! The answer was: 92 .",
            "url": "https://nathanshih04.github.io/NathanFP/2022/08/24/nathan-javaPrim.html",
            "relUrl": "/2022/08/24/nathan-javaPrim.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Python Notebook",
            "content": "print(&#39;hello world&#39;) . hello world .",
            "url": "https://nathanshih04.github.io/NathanFP/2022/08/22/nathan-python.html",
            "relUrl": "/2022/08/22/nathan-python.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Java Coin Flip",
            "content": "import java.util.Random; int flipCount = 10; . public void coinFlip(int count){ Random rando = new Random(); for(int i = 0; i &lt; count; i++){ int side = rando.nextInt(2); if(side == 1){ System.out.println(&quot;Heads&quot;); } else{ System.out.println(&quot;Tails&quot;); } } } . coinFlip(flipCount); . Heads Tails Heads Tails Tails Heads Heads Tails Heads Heads .",
            "url": "https://nathanshih04.github.io/NathanFP/2022/08/21/nathan-java.html",
            "relUrl": "/2022/08/21/nathan-java.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Firstpost",
            "content": "First post! .",
            "url": "https://nathanshih04.github.io/NathanFP/2022/08/21/FirstPost.html",
            "relUrl": "/2022/08/21/FirstPost.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://nathanshih04.github.io/NathanFP/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post12": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://nathanshih04.github.io/NathanFP/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://nathanshih04.github.io/NathanFP/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://nathanshih04.github.io/NathanFP/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}