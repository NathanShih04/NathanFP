{
  
    
        "post0": {
            "title": "CB Multiple Choice Corrections",
            "content": ". Q6 . This question I probably moved too fast because returning d1-d2 would only check one side for tolerances. I was also not too sure what Math.abs did but now that I look at it, it&#39;s absolute value so that would be the right answer. . Q19 . This is Demorgan&#39;s law and I completely forgot how the signs and distribution worked. However, now I know that you distribute the ! normally but the signs must change if a ! is distributed. For this reason, the answer would be B. . Q29 . In this question, it asks to select the code segment that has the same output as the code segment given(divisble by 4). The answer choice B that I chose would count by 4s but it won&#39;t print out the correct values as k is initialized to 1 instead of 4. Therefore, answer choice B is correct. . Q40 . This question was pretty confusing for me as it deals with recursion. I know that it recurs through the word and prints out the letters but I didn&#39;t know which order it was returned in. After looking at it a little bit more, I realized that it will return the word with 1 letter first then work its way down to len-1 letters. Therefore, the answer will be C instead of A. .",
            "url": "https://nathanshih04.github.io/NathanFP/2022/11/08/nathan-CBMC.html",
            "relUrl": "/2022/11/08/nathan-CBMC.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Lesson 6 Work",
            "content": "// HACK 1 int[] arrayOne = {1, 3, 5, 7, 9}; for (int num : arrayOne) { if (num % 2 == 0) { System.out.println(num); } } . // HACK 2 // Answer is B . // HACK 3 import java.util.Arrays; public class arraySorter { public static void main(int[] a) { Arrays.sort(a); for (int i : a) { System.out.println(i); } } } int[] myNumbers = new int[] {5, 3, 4, 1, 2}; arraySorter.main(myNumbers); . 1 2 3 4 5 . // Hack 4 // Answer is B . // HACK 5 public class ForEachDemo { public static void main(String[] args) { int[] highScores = { 10, 9, 8, 8}; String[] names = {&quot;Jamal&quot;, &quot;Emily&quot;, &quot;Destiny&quot;, &quot;Mateo&quot;}; // for each loop with an int array for (int value : highScores) { System.out.println( value ); } // for each loop with a String array for (String value : names) { System.out.println(value); // this time it&#39;s a name! } } } . // HACK 6 // Answer is D . // HACK 7 public class leftShifted { public static int[] main(int[] a) { int first = a[0]; for (int i=1; i&lt;a.length; i++) { a[i-1] = a[i]; } a[a.length-1] = first; return a; } } int[] array = {7,9,4}; int[] array_out = leftShifted.main(array); Arrays.toString(array_out) . [9, 4, 7] . // HACK 8 public class findDuplicate { public static int main(int[] a, int b) { int d=0; for (int number : a) { if (number==b) { d++; } } return d; } } int[] array = {7,7,9,4}; findDuplicate.main(array, 7); . 2 . //HACK 9 public class reverseString { public static char[] main(char[] s) { char[] reverse = new char[s.length]; for (int i=s.length-1; i&gt;=0; i--) { reverse[s.length-i-1] = s[i]; } return reverse; } } String s = &quot;hello&quot;; char[] c = s.toCharArray(); char[] reverse = reverseString.main(c); // Arrays.toString(reverse) String reversed = new String(reverse); System.out.println(reversed); . olleh . // FRQ PART A public void addMembers(String[] names, int gradYear) { for (String name : names) { MemberInfo member = new MemberInfo(name, gradYear, true); memberList.add(member); } } .",
            "url": "https://nathanshih04.github.io/NathanFP/2022/10/25/nathan-Unit6Work.html",
            "relUrl": "/2022/10/25/nathan-Unit6Work.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Lesson 5 Work",
            "content": "Learnings . An object&#39;s state are attritbutes of an object and their values at a given time. Static variables and methods belong to a class, not an object. . // FRQ Q2 2019 public class StepTracker { private int lowerBound; private int steps; private int totalDays; private int activeDays; public StepTracker(int minSteps) { lowerBound = minSteps; steps = 0; totalDays = 0; activeDays = 0; } public void addDailySteps(int newSteps) { steps += newSteps; totalDays += 1; if (newSteps &gt;= lowerBound) { activeDays += 1; } } public int activeDays(){ return activeDays; } public double averageSteps() { if (totalDays == 0) { return (double) totalDays; } else { return (double) steps / totalDays; } } public static void main(String[] args){ StepTracker tr = new StepTracker(10000); System.out.println(tr.activeDays()); System.out.println(tr.averageSteps()); tr.addDailySteps(9000); System.out.println(tr.averageSteps()); tr.addDailySteps(23000); System.out.println(tr.activeDays()); } } StepTracker.main(null); . 0 0.0 9000.0 1 .",
            "url": "https://nathanshih04.github.io/NathanFP/2022/10/23/nathan-Unit5Work.html",
            "relUrl": "/2022/10/23/nathan-Unit5Work.html",
            "date": " • Oct 23, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Lesson 4 Work",
            "content": "Learnings . Loop through strings as array of chars. For-each loop iterates through arrays with specified datatypes. Sometimes called enhanced for loops. . // HACK 1 public class WhileLoops { public double money = 0; public double profit = 5450000; public double goal = 30000000; public double years = 0; public void Calc() { while (this.money &lt; this.goal) { this.money = this.money + this.profit; this.profit = this.profit * 1.05; this.years = this.years + 1; } System.out.println(this.years); } public static void main(String[] args) { WhileLoops obj = new WhileLoops(); obj.Calc(); } } WhileLoops.main(null); . 5.0 . // HACK 2 public class ForLoops { public double temp = 0; public void Calc() { System.out.println(&quot;Numbers 10-15&quot;); for (int x = 10; x &lt;= 15; x++) { System.out.println(x); } System.out.println(&quot;Convert temperature&quot;); for (int x = 0; x&lt;=100; x+=10) { temp = 0; temp = x + 273.15; System.out.println(x + &quot;c -&gt; &quot; + temp + &quot;k&quot;); } } public static void main(String[] args) { ForLoops obj = new ForLoops(); obj.Calc(); } } ForLoops.main(null); . Numbers 10-15 10 11 12 13 14 15 Convert temperature 0c -&gt; 273.15k 10c -&gt; 283.15k 20c -&gt; 293.15k 30c -&gt; 303.15k 40c -&gt; 313.15k 50c -&gt; 323.15k 60c -&gt; 333.15k 70c -&gt; 343.15k 80c -&gt; 353.15k 90c -&gt; 363.15k 100c -&gt; 373.15k . // CAESAR CIPHER HW public class CaesarCipher { public String[] letters = {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;i&quot;, &quot;j&quot;, &quot;k&quot;, &quot;l&quot;, &quot;m&quot;, &quot;n&quot;, &quot;o&quot;, &quot;p&quot;, &quot;q&quot;, &quot;r&quot;, &quot;s&quot;, &quot;t&quot;, &quot;u&quot;, &quot;v&quot;, &quot;w&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;}; public String temp; // Method which takes a string and swaps a character static char[] swap(String str, int i, char j) { char ch[] = str.toCharArray(); ch[i] = j; return ch; } public String Calc(String message) { temp = message; // Looping through each character in the message for (int i=0; i&lt;temp.length(); i++) { // Cast the character to ascii to make substitutions much more efficient int ascii = (int) temp.charAt(i); // Letters at the end of the alphabet behave differently, so we create two separate conditionals if (ascii &gt; 64 &amp;&amp; ascii &lt; 88 || (ascii &gt; 96 &amp;&amp; ascii &lt; 120)) { ascii = ascii + 3; String tempSwap = new String(swap(temp, i, (char) ascii)); temp = tempSwap; } // This is for the last three letters of the alphabet else if (ascii &gt; 87 &amp;&amp; ascii &lt; 91 || ascii &gt; 119 &amp;&amp; ascii &lt; 123) { ascii = ascii - 23; String tempSwap = new String(swap(temp, i, (char) ascii)); temp = tempSwap; } } return temp; } public static void main(String[] args) { CaesarCipher cipherCalc = new CaesarCipher(); String message1 = &quot;Kfzb gly!&quot;; String message2 = &quot;zlab zlab zlab&quot;; String message3 = &quot;prmbozxifcoxdfifpqfzbumfxifalzflrp&quot;; System.out.println(cipherCalc.Calc(message1)); System.out.println(cipherCalc.Calc(message2)); System.out.println(cipherCalc.Calc(message3)); } } CaesarCipher.main(null); . Nice job! code code code supercalifragilisticexpialidocious .",
            "url": "https://nathanshih04.github.io/NathanFP/2022/10/22/nathan-Unit4Work.html",
            "relUrl": "/2022/10/22/nathan-Unit4Work.html",
            "date": " • Oct 22, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Lesson 3 Work",
            "content": "Learnings . De Morgan&#39;s laws: Help simplify Boolean expressions . !(a&amp;&amp;b) = (!a || !b) . !(a || b) = (!a &amp;&amp; !b) . // FRQ PART A public static int numberOfLeapYears(int year1, int year2){ int numLeapYears = 0; for(int i = year1; i &lt;= year2; i++){ if(isLeapYear(i)){ numLeapYears++; } } return numLeapYears; } . // FRQ PART B public class APCalendar{ /** Returns true if year is a leap year and false otherwise. */ private static boolean isLeapYear(int year) { /* implementation not shown */ } /** Returns the number of leap years between year1 and year2, inclusive. * Precondition: 0 &lt;= year1 &lt;= year2 */ public static int numberOfLeapYears(int year1, int year2){ int numLeapYears = 0; for(int i = year1; i &lt;= year2; i++){ if(isLeapYear(i)){ numLeapYears++; } } return numLeapYears; } /** Returns the value representing the day of the week for the first day of year, * where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. */ private static int firstDayOfYear(int year) { /* implementation not shown */ } /** Returns n, where month, day, and year specify the nth day of the year. * Returns 1 for January 1 (month = 1, day = 1) of any year. * Precondition: The date represented by month, day, year is a valid date. */ private static int dayOfYear(int month, int day, int year) { /* implementation not shown */ } /** Returns the value representing the day of the week for the given date * (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., * and 6 denotes Saturday. * Precondition: The date represented by month, day, year is a valid date. */ public static int daysOfWeek(int month, int day, int year){ int firstDay = firstDayOfYear(year); int nth = dayOfYear(month, day, year); int returnDay = ((firstDay + nth) -1) % 7; return returnDay; } // There may be instance variables, constructors, and other methods not shown. } . CONDITIONALS . //2 import java.util.Scanner; public class Exercise2 { public static void main(String[] Strings) { Scanner input = new Scanner(System.in); System.out.print(&quot;Input a: &quot;); double a = input.nextDouble(); System.out.print(&quot;Input b: &quot;); double b = input.nextDouble(); System.out.print(&quot;Input c: &quot;); double c = input.nextDouble(); double result = b * b - 4.0 * a * c; if (result &gt; 0.0) { double r1 = (-b + Math.pow(result, 0.5)) / (2.0 * a); double r2 = (-b - Math.pow(result, 0.5)) / (2.0 * a); System.out.println(&quot;The roots are &quot; + r1 + &quot; and &quot; + r2); } else if (result == 0.0) { double r1 = -b / (2.0 * a); System.out.println(&quot;The root is &quot; + r1); } else { System.out.println(&quot;The equation has no real roots.&quot;); } } } Exercise2.main(null); . Input a: Input b: Input c: The equation has no real roots. . //4 import java.util.Scanner; public class Exercise4 { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.print(&quot;Input value: &quot;); double input = in.nextDouble(); if (input &gt; 0) { if (input &lt; 1) { System.out.println(&quot;Positive small number&quot;); } else if (input &gt; 1000000) { System.out.println(&quot;Positive large number&quot;); } else { System.out.println(&quot;Positive number&quot;); } } else if (input &lt; 0) { if (Math.abs(input) &lt; 1) { System.out.println(&quot;Negative small number&quot;); } else if (Math.abs(input) &gt; 1000000) { System.out.println(&quot;Negative large number&quot;); } else { System.out.println(&quot;Negative number&quot;); } } else { System.out.println(&quot;Zero&quot;); } } } Exercise4.main(null); . Input value: Positive number . //6 import java.util.Scanner; public class Exercise6 { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.print(&quot;Input floating-point number: &quot;); double x = in.nextDouble(); System.out.print(&quot;Input floating-point another number: &quot;); double y = in.nextDouble(); x = Math.round(x * 1000); x = x / 1000; y = Math.round(y * 1000); y = y / 1000; if (x == y) { System.out.println(&quot;They are the same up to three decimal places&quot;); } else { System.out.println(&quot;They are different&quot;); } } } Exercise6.main(null); . Input floating-point number: Input floating-point another number: They are different . //8 import java.util.Scanner; public class Exercise8 { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.print(&quot;Input an alphabet: &quot;); String input = in.next().toLowerCase(); boolean uppercase = input.charAt(0) &gt;= 65 &amp;&amp; input.charAt(0) &lt;= 90; boolean lowercase = input.charAt(0) &gt;= 97 &amp;&amp; input.charAt(0) &lt;= 122; boolean vowels = input.equals(&quot;a&quot;) || input.equals(&quot;e&quot;) || input.equals(&quot;i&quot;) || input.equals(&quot;o&quot;) || input.equals(&quot;u&quot;); if (input.length() &gt; 1) { System.out.println(&quot;Error. Not a single character.&quot;); } else if (!(uppercase || lowercase)) { System.out.println(&quot;Error. Not a letter. Enter uppercase or lowercase letter.&quot;); } else if (vowels) { System.out.println(&quot;Input letter is Vowel&quot;); } else { System.out.println(&quot;Input letter is Consonant&quot;); } } } Exercise8.main(null); . Input an alphabet: Input letter is Consonant . //10 public class Exercise10 { public static void main(String[] args) { int i; System.out.println (&quot;The first 10 natural numbers are: n&quot;); for (i=1;i&lt;=10;i++) { System.out.println (i); } System.out.println (&quot; n&quot;); } } Exercise10.main(null); . The first 10 natural numbers are: 1 2 3 4 5 6 7 8 9 10 . //12 import java.util.Scanner; public class Exercise12 { public static void main(String[] args) { int i,n=0,s=0; double avg; { System.out.println(&quot;Input the 5 numbers : &quot;); } for (i=0;i&lt;5;i++) { Scanner in = new Scanner(System.in); n = in.nextInt(); s +=n; } avg=s/5; System.out.println(&quot;The sum of 5 no is : &quot; +s+&quot; nThe Average is : &quot; +avg); } } Exercise12.main(null); . Input the 5 numbers : The sum of 5 no is : 66 The Average is : 13.0 . //14 import java.util.Scanner; public class Exercise14 { public static void main(String[] args) { int j,n; System.out.print(&quot;Input the number(Table to be calculated): &quot;); { System.out.print(&quot;Input number of terms : &quot;); Scanner in = new Scanner(System.in); n = in.nextInt(); System.out.println (&quot; n&quot;); for(j=0;j&lt;=n;j++) System.out.println(n+&quot; X &quot;+j+&quot; = &quot; +n*j); } } } Exercise14.main(null); . Input the number(Table to be calculated): Input number of terms : 35 X 0 = 0 35 X 1 = 35 35 X 2 = 70 35 X 3 = 105 35 X 4 = 140 35 X 5 = 175 35 X 6 = 210 35 X 7 = 245 35 X 8 = 280 35 X 9 = 315 35 X 10 = 350 35 X 11 = 385 35 X 12 = 420 35 X 13 = 455 35 X 14 = 490 35 X 15 = 525 35 X 16 = 560 35 X 17 = 595 35 X 18 = 630 35 X 19 = 665 35 X 20 = 700 35 X 21 = 735 35 X 22 = 770 35 X 23 = 805 35 X 24 = 840 35 X 25 = 875 35 X 26 = 910 35 X 27 = 945 35 X 28 = 980 35 X 29 = 1015 35 X 30 = 1050 35 X 31 = 1085 35 X 32 = 1120 35 X 33 = 1155 35 X 34 = 1190 35 X 35 = 1225 . //16 import java.util.Scanner; public class Exercise16 { public static void main(String[] args) { int i,j,n; System.out.print(&quot;Input number of rows : &quot;); Scanner in = new Scanner(System.in); n = in.nextInt(); for(i=1;i&lt;=n;i++) { for(j=1;j&lt;=i;j++) System.out.print(j); System.out.println(&quot;&quot;); } } } Exercise16.main(null); . Input number of rows : 1 12 . //18 import java.util.Scanner; public class Exercise18 { public static void main(String[] args) { int i,j,n,k=1; System.out.print(&quot;Input number of rows : &quot;); Scanner in = new Scanner(System.in); n = in.nextInt(); for(i=1;i&lt;=n;i++) { for(j=1;j&lt;=i;j++) System.out.print(k++); System.out.println(&quot;&quot;); } } } Exercise18.main(null); . Input number of rows : 1 23 456 78910 1112131415 161718192021 . //20 import java.util.Scanner; public class Exercise20 { public static void main(String[] args) { int numberOfRows; System.out.print(&quot;Input number of rows : &quot;); Scanner in = new Scanner(System.in); numberOfRows = in.nextInt(); int number = 1; for (int row = 1; row &lt;= numberOfRows; row++) { for (int column = 1; column &lt;= row; column++) { System.out.print(number + &quot; &quot;); number++; } System.out.println(); } } } Exercise20.main(null); . Input number of rows : 1 2 3 4 5 6 7 8 9 10 .",
            "url": "https://nathanshih04.github.io/NathanFP/2022/10/18/nathan-Unit3Work.html",
            "relUrl": "/2022/10/18/nathan-Unit3Work.html",
            "date": " • Oct 18, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Lesson 2 Work",
            "content": "Quiz . Static Initialization Blocks are mainly used to initialize static fields of a class. . // FRQ 1a public int scoreGuess(String guess) { int count = 0; for (int i = 0; i &lt;= secret.length() - guess.length(); i++) { if (secret.substring(i, i + guess.length()).equals(guess)) { count++; } } return count * guess.length(); } . // FRQ 1b public String findBetterGuess(String guess1, String guess2) { if (scoreGuess(guess1) &gt; scoreGuess(guess2)) { return guess1; } if (scoreGuess(guess2) &gt; scoreGuess(guess1)) { return guess2; } if (guess1.compareTo(guess2) &gt; 0) { return guess1; } return guess2; } .",
            "url": "https://nathanshih04.github.io/NathanFP/2022/10/18/nathan-Unit2Work.html",
            "relUrl": "/2022/10/18/nathan-Unit2Work.html",
            "date": " • Oct 18, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Unit 1 Work",
            "content": "import java.util.*; public class gradecalc { public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.println(&quot;Final is part of the test category? true or false&quot;); boolean finalIsTest = sc.nextBoolean(); if (finalIsTest) { System.out.println(&quot;Current grade:&quot;); double grade = sc.nextDouble(); System.out.println(&quot;What percent of your grade is the tests category?&quot;); int testsPercent = sc.nextInt(); System.out.println(&quot;Your current grade (in tests category)?&quot;); double testsGrade = sc.nextDouble(); System.out.println(&quot;Total points in tests category currently?&quot;); int testsPoints = sc.nextInt(); System.out.println(&quot;Amount of points:&quot;); int finalPoints = sc.nextInt(); System.out.println(&quot;The grade you want:&quot;); double finalgrade = sc.nextDouble(); double percentReq = finalgrade - (grade - testsGrade * testsPercent/100.0); double testPointsNeeded = (percentReq/testsPercent) * (testsPoints + finalPoints); double finalPointsNeeded = testPointsNeeded - testsPoints; System.out.println(&quot;You need a &quot; + finalPointsNeeded + &quot; on the final.&quot;); } else { System.out.println(&quot;What is your current grade?&quot;); double grade = sc.nextDouble(); System.out.println(&quot;How much percent of your grade is the final?&quot;); int finalPercent = sc.nextInt(); System.out.println(&quot;What is your desired grade?&quot;); double target = sc.nextDouble(); double percentReq = target - (grade/100.0)*(100.0-finalPercent); double gradeNeeded = 100.0 * (percentReq/finalPercent); System.out.println(&quot;You need a &quot; + gradeNeeded + &quot; on the test.&quot;); } } } gradecalc.main(null); . Final is part of the test category? true or false What is your current grade? How much percent of your grade is the final? What is your desired grade? You need a 78.0 on the test. .",
            "url": "https://nathanshih04.github.io/NathanFP/2022/10/17/nathan-Unit1Work.html",
            "relUrl": "/2022/10/17/nathan-Unit1Work.html",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "CollegeBoard Notes",
            "content": "Unit 1 Primitive Types . String literal - an exact sequence of characters enclosed between two quotation marks | Different Errors Syntax/compiler error: program won&#39;t compile due to typos | Exception | Logic error: actual output differs from anticipated output | . | . Data Types . Determine what type of value is stored ### Variables | variable: name for memory location holding a certain type of value no spaces | can&#39;t start with # | no special characters (anything besides letters/digits) | no Java reserved keywords | use camelCase conventions #### Declaring | assignment operator (=) is used to initialize variable or change its associated value ### Primitive | . | Examples: boolean (1 bit) | int (32 bits) if the integer result of an expression is beyond the range there will be an overflow error | . | double (64 bits) ### Reference | . | . Arthmetic Operators . INCLUDES: +, -, *, /, % | operations with only int ==&gt; output int | operations with only double ==&gt; output double | operations with both int and double ==&gt; * output double | division by zero ==&gt; ArithmeticException | . Compound Assignment Operators and Incrememt/Decrement Operators . +=, -=, *=, /=, %= | Using these will change the value of the variable to the result of the operation | Increment/Decrement: ++: adds 1 | --: subtracts 1 | . | . Unit 2 Using Objects . Constructors . Used to initialize attributes for an object | . // Syntax example public Turtle{ public Turtle(String nm, int ag, boolean it){ // signature with formal parameters name = nm; age = ag; isTortoise = it; } } // call by value: pass actual parameters to constructor Turtle Shellbert = new Turtle(&quot;Shellbert&quot;, 4, true); // creating an object with &quot;new&quot; keyword calls constructor . Vocab . signature: constructor name and parameter list . | parameter list: lists type of values passed and their variable names (formal parameters) . parameter: value passed into a constructor (actual parameters), must match types specified in parameter list | call by value: initializes formal parameters with copies of the actual parameters | . | overloaded constructors: there are multiple constructors with same name, differing signatures . | no argument constructor: constructor with no parameters, sets attributes (instance variables) of object to default values . String: null | boolean: false | . | null: variable reference doesn&#39;t actually contain an object | .",
            "url": "https://nathanshih04.github.io/NathanFP/2022/10/15/nathan-collegeboardnotes.html",
            "relUrl": "/2022/10/15/nathan-collegeboardnotes.html",
            "date": " • Oct 15, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "POJO",
            "content": "POJO with annotations . import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import javax.persistence.*; @Data // Annotations to simplify writing code (ie constructors, setters) @NoArgsConstructor @AllArgsConstructor @Entity // Annotation to simplify creating an entity, which is a lightweight persistence domain object. Typically, an entity represents a table in a relational database, and each entity instance corresponds to a row in that table. public class CarBrands { @Id @GeneratedValue(strategy = GenerationType.AUTO) private Long id; // Unique identifier @Column(unique=true) private String brand; // The Joke private int like; // Store joke likes private int dislike; // Store joke jeers } . POJO without LOMBOK . import javax.persistence.*; @Entity // Annotation to simplify creating an entity, which is a lightweight persistence domain object. Typically, an entity represents a table in a relational database, and each entity instance corresponds to a row in that table. public class CarBrands { public CarBrands() { this.id = null; this.brand = &quot;&quot;; this.like = 0; this.dislike = 0; } public CarBrands(Long ID, String Brand, int Like, int Dislike) { this.id = null; this.brand = Brand; this.like = Like; this.dislike = Dislike; } @Id @GeneratedValue(strategy = GenerationType.AUTO) private Long id; // Unique identifier @Column(unique=true) private String brand; // The Joke private int like; // Store joke likes private int dislike; // Store joke jeers // Only have a getter for ID // Don&#39;t need to set since it auto generates public Long getID() { return this.id; } public String getBrand() { return this.brand; } public void setBrand(String Brand) { this.brand = Brand; } public int getLike() { return this.like; } public void setLike(int Like) { this.like = Like; } public int getDislike() { return this.dislike; } public void setDislike(int Dislike) { this.dislike = Dislike; } } .",
            "url": "https://nathanshih04.github.io/NathanFP/2022/10/07/nathan-pojo.html",
            "relUrl": "/2022/10/07/nathan-pojo.html",
            "date": " • Oct 7, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "ArrayLists",
            "content": "import java.util.ArrayList; import java.util.Comparator; public class Main { public static void main(String[] args) { // Creating 2 arraylists ArrayList&lt;String&gt; Tortoise = new ArrayList&lt;String&gt;(); ArrayList&lt;String&gt; AquaticTurtle = new ArrayList&lt;String&gt;(); // Adding without index Tortoise.add(&quot;Russian Tortoise&quot;); AquaticTurtle.add(&quot;Green Sea Turtle&quot;); System.out.println(&quot;List 1 add() without index:&quot; + &quot; n&quot; + Tortoise + &quot; n&quot;); // list 1 adding with index Tortoise.add(0, &quot;Leopard Tortoise&quot;); Tortoise.add(2, &quot;Marginated Tortoise&quot;); System.out.println(&quot;List 1 add() Leopard Tort at index 0, and Marginated Tort at index 2:&quot; + &quot; n&quot; + Tortoise + &quot; n&quot;); // size() System.out.println(&quot;Size of list 1:&quot; + &quot; n&quot; + Tortoise.size() + &quot; n&quot;); // Adding list 2 to list 1 using addAll() AquaticTurtle.add(&quot;Painted Turtle&quot;); AquaticTurtle.add(&quot;Loggerhead Sea Turtle&quot;); AquaticTurtle.add(&quot;Snapping Turtle&quot;); Tortoise.addAll(AquaticTurtle); System.out.println(&quot;addAll() adding without index:&quot; + &quot; n&quot; + Tortoise + &quot; n&quot;); // Adding list 2 to list 1 with index Tortoise.clear(); Tortoise.add(&quot;Russian Tortoise&quot;); Tortoise.add(&quot;Leopard Tortoise&quot;); Tortoise.add(0, &quot;Greek Tortoise&quot;); Tortoise.add(2, &quot;Marginated Tortoise&quot;); Tortoise.addAll(2, AquaticTurtle); System.out.println(&quot;addAll() adding at index 2:&quot; + &quot; n&quot; + Tortoise + &quot; n&quot;); // remove(int) index Tortoise.remove(6); System.out.println(&quot;remove() at index 6:&quot; + &quot; n&quot; + Tortoise + &quot; n&quot;); // remove(element) Tortoise.remove(&quot;Leopard Tortoise&quot;); System.out.println(&quot;remove() Leopard Tort:&quot; + &quot; n&quot; + Tortoise + &quot; n&quot;); // get(index) System.out.println(&quot;Get element at index 2:&quot; + &quot; n&quot; + Tortoise.get(2) + &quot; n&quot;); // set(index) System.out.print(&quot;Set element at index 2:&quot; + &quot; n&quot; + &quot;Before: &quot;); System.out.println(Tortoise); Tortoise.set(2, &quot;Egyptian Tortoise&quot;); System.out.println(&quot;After: &quot; + Tortoise + &quot; n&quot;); // indexOf(element) System.out.println(&quot;indexOf Russian Tort:&quot; + &quot; n&quot; + Tortoise.indexOf(&quot;Russian Tortoise&quot;) + &quot; n&quot;); Tortoise.add(&quot;Russian Tortoise&quot;); //temp for next method // lastIndexOf(element) System.out.println(&quot;Last index of Russian Tort: &quot; + Tortoise.lastIndexOf(&quot;Russian Tortoise&quot;) + &quot; n&quot; + Tortoise + &quot; n&quot;); // equals(element) System.out.println(&quot; Equals Russian Tort: &quot; + Tortoise.equals(&quot;Russian Tortoise&quot;) + &quot; n&quot;); // hascode() System.out.println(&quot;Hash Code: &quot; + Tortoise.hashCode() + &quot; n&quot;); // isEmpty() System.out.println(&quot;Is the arraylist empty: &quot; + Tortoise.isEmpty() + &quot; n&quot;); // contains(element) System.out.println(&quot;Does arraylist contain &#39;Russian Tortoise&#39;: &quot; + Tortoise.contains(&quot;Russian Tortoise&quot;) + &quot; n&quot;); // containsAll(collection) System.out.println(&quot;Does arraylist contain Aquatic Turtle collection?: &quot; + &quot; n&quot; + &quot;Aquatic Turtle collection: &quot; + AquaticTurtle + &quot; n&quot;); System.out.println(&quot;Tortoise: &quot; + Tortoise + &quot; n&quot;); System.out.println(Tortoise.containsAll(AquaticTurtle) + &quot; n&quot;); Tortoise.add(&quot;Green Sea Turtle&quot;); // Adding missing element System.out.println(&quot;Does arraylist contain Aquatic Turtle collection?: &quot; + &quot; n&quot; + &quot;New Aquatic Turtle collection: &quot; + AquaticTurtle + &quot; n&quot;); System.out.println(&quot;Tortoise: &quot; + Tortoise + &quot; n&quot;); System.out.println(Tortoise.containsAll(AquaticTurtle) + &quot; n&quot;); // sort(comparator) System.out.println(&quot;Unsorted: &quot; + Tortoise); Tortoise.sort(Comparator.naturalOrder()); System.out.println(&quot;Sorted using natural alphabetical order comparator: &quot; + Tortoise + &quot; n&quot;); // clear() Tortoise.clear(); AquaticTurtle.clear(); System.out.println(&quot;Cleared list1:&quot; + &quot; n&quot; + Tortoise); System.out.println(&quot;Cleared list2:&quot; + &quot; n&quot; + AquaticTurtle); } } Main.main(null); . List 1 add() without index: [Russian Tortoise] List 1 add() Leopard Tort at index 0, and Marginated Tort at index 2: [Leopard Tortoise, Russian Tortoise, Marginated Tortoise] Size of list 1: 3 addAll() adding without index: [Leopard Tortoise, Russian Tortoise, Marginated Tortoise, Green Sea Turtle, Painted Turtle, Loggerhead Sea Turtle, Snapping Turtle] addAll() adding at index 2: [Greek Tortoise, Russian Tortoise, Green Sea Turtle, Painted Turtle, Loggerhead Sea Turtle, Snapping Turtle, Marginated Tortoise, Leopard Tortoise] remove() at index 6: [Greek Tortoise, Russian Tortoise, Green Sea Turtle, Painted Turtle, Loggerhead Sea Turtle, Snapping Turtle, Leopard Tortoise] remove() Leopard Tort: [Greek Tortoise, Russian Tortoise, Green Sea Turtle, Painted Turtle, Loggerhead Sea Turtle, Snapping Turtle] Get element at index 2: Green Sea Turtle Set element at index 2: Before: [Greek Tortoise, Russian Tortoise, Green Sea Turtle, Painted Turtle, Loggerhead Sea Turtle, Snapping Turtle] After: [Greek Tortoise, Russian Tortoise, Egyptian Tortoise, Painted Turtle, Loggerhead Sea Turtle, Snapping Turtle] indexOf Russian Tort: 1 Last index of Russian Tort: 6 [Greek Tortoise, Russian Tortoise, Egyptian Tortoise, Painted Turtle, Loggerhead Sea Turtle, Snapping Turtle, Russian Tortoise] Equals Russian Tort: false Hash Code: 783410484 Is the arraylist empty: false Does arraylist contain &#39;Russian Tortoise&#39;: true Does arraylist contain Aquatic Turtle collection?: Aquatic Turtle collection: [Green Sea Turtle, Painted Turtle, Loggerhead Sea Turtle, Snapping Turtle] Tortoise: [Greek Tortoise, Russian Tortoise, Egyptian Tortoise, Painted Turtle, Loggerhead Sea Turtle, Snapping Turtle, Russian Tortoise] false Does arraylist contain Aquatic Turtle collection?: New Aquatic Turtle collection: [Green Sea Turtle, Painted Turtle, Loggerhead Sea Turtle, Snapping Turtle] Tortoise: [Greek Tortoise, Russian Tortoise, Egyptian Tortoise, Painted Turtle, Loggerhead Sea Turtle, Snapping Turtle, Russian Tortoise, Green Sea Turtle] true Unsorted: [Greek Tortoise, Russian Tortoise, Egyptian Tortoise, Painted Turtle, Loggerhead Sea Turtle, Snapping Turtle, Russian Tortoise, Green Sea Turtle] Sorted using natural alphabetical order comparator: [Egyptian Tortoise, Greek Tortoise, Green Sea Turtle, Loggerhead Sea Turtle, Painted Turtle, Russian Tortoise, Russian Tortoise, Snapping Turtle] Cleared list1: [] Cleared list2: [] . Using Cars . import java.util.Scanner; Scanner scan = new Scanner(System.in); ArrayList&lt;String&gt; CarList = new ArrayList&lt;String&gt;(); boolean running = true; System.out.println(&quot;Input 1 to add a car to favorite list, 2 to subtract a car from your favorite list, 3 to view the list, 4 to clear all, and 5 to end: &quot;); int inp = Integer.parseInt(scan.nextLine()); while(running){ if(inp == 1){ System.out.println(&quot;Input name of the car to add: &quot;); String car = scan.nextLine(); CarList.add(car); System.out.println(&quot;Input 1 to add a car to favorite list, 2 to subtract a car from your favorite list, 3 to view the list, 4 to clear all, and 5 to end: &quot;); inp = Integer.parseInt(scan.nextLine()); } else if(inp == 2){ System.out.println(&quot;Input name of the car to delete: &quot;); String car = scan.nextLine(); CarList.remove(car); System.out.println(&quot;Input 1 to add a car to favorite list, 2 to subtract a car from your favorite list, 3 to view the list, 4 to clear all, and 5 to end: &quot;); inp = Integer.parseInt(scan.nextLine()); } else if(inp == 3){ System.out.println(CarList); System.out.println(&quot;Input 1 to add a car to favorite list, 2 to subtract a car from your favorite list, 3 to view the list, 4 to clear all, and 5 to end: &quot;); inp = Integer.parseInt(scan.nextLine()); } else if(inp == 4){ CarList.clear(); System.out.println(CarList); System.out.println(&quot;Input 1 to add a car to favorite list, 2 to subtract a car from your favorite list, 3 to view the list, 4 to clear all, and 5 to end: &quot;); inp = Integer.parseInt(scan.nextLine()); } else{ running = false; } } . Input 1 to add a car to favorite list, 2 to subtract a car from your favorite list, 3 to view the list, 4 to clear all, and 5 to end: Input name of the car to add: Input 1 to add a car to favorite list, 2 to subtract a car from your favorite list, 3 to view the list, 4 to clear all, and 5 to end: [Honda Civic] Input 1 to add a car to favorite list, 2 to subtract a car from your favorite list, 3 to view the list, 4 to clear all, and 5 to end: Input name of the car to add: Input 1 to add a car to favorite list, 2 to subtract a car from your favorite list, 3 to view the list, 4 to clear all, and 5 to end: [Honda Civic, Toyota Prius] Input 1 to add a car to favorite list, 2 to subtract a car from your favorite list, 3 to view the list, 4 to clear all, and 5 to end: Input name of the car to add: Input 1 to add a car to favorite list, 2 to subtract a car from your favorite list, 3 to view the list, 4 to clear all, and 5 to end: [Honda Civic, Toyota Prius, Honda Prelude] Input 1 to add a car to favorite list, 2 to subtract a car from your favorite list, 3 to view the list, 4 to clear all, and 5 to end: Input name of the car to delete: Input 1 to add a car to favorite list, 2 to subtract a car from your favorite list, 3 to view the list, 4 to clear all, and 5 to end: [Honda Civic, Honda Prelude] Input 1 to add a car to favorite list, 2 to subtract a car from your favorite list, 3 to view the list, 4 to clear all, and 5 to end: [] Input 1 to add a car to favorite list, 2 to subtract a car from your favorite list, 3 to view the list, 4 to clear all, and 5 to end: .",
            "url": "https://nathanshih04.github.io/NathanFP/2022/10/06/nathan-arraylist.html",
            "relUrl": "/2022/10/06/nathan-arraylist.html",
            "date": " • Oct 6, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Images",
            "content": "import javax.imageio.ImageIO; import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; public class ImageIOTest { public static void main( String[] args ){ BufferedImage img = null; // buffer type try { // Name of file and directories String name = &quot;tort3&quot;; String in = &quot;images/&quot;; String out = &quot;images/tmp/&quot;; // Either use URL or File for reading image using ImageIO File imageFile = new File(in + name + &quot;.png&quot;); img = ImageIO.read(imageFile); // set buffer of image data // ImageIO Image write to gif in Java // Documentation https://docs.oracle.com/javase/tutorial/2d/images/index.html ImageIO.write(img, &quot;gif&quot;, new File(out + name + &quot;.gif&quot;) ); // write buffer to gif } catch (IOException e) { e.printStackTrace(); } System.out.println(&quot;Success&quot;); } } ImageIOTest.main(null); . Success . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String grayScaledFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } double pixVal = 0; // Changing to go by blocks 2 times as tall as wide // Height is in outer loop, so for each height the entire width is covered // To get 2 times as tall as wide blocks, we can use 1 width x 2 height // This is done by accounting for each pixel and the one below it in the inner for loop, then averaging // To account for this in the outer for loop, we simply increment i by 2 to not overcount // Also change the upper limit so that there is no error (since we will acount for i+1 within the code block) for (int i = 0; i &lt; img.getHeight() - 1; i+=2) { for (int j = 0; j &lt; img.getWidth(); j++) { int pixel = img.getRGB(j, i); Color col = new Color(pixel, true); int pixel2 = img.getRGB(j, i+1); Color col2 = new Color(pixel2, true); pixVal = (col.getRed() + col2.getRed() + col.getBlue() + col2.getBlue() + col.getGreen() + col2.getGreen())/6; try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // Gray scale method public void GrayScale() { BufferedImage img = null; // Reading file try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } // Iterating through all pixels for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { // For each pixel, getting RGB contents int pixel = img.getRGB(j, i); // Creating color object out of RGB contents for easy extraction Color color = new Color(pixel, true); // Using color object&#39;s methods to get the R, G, and B values for the pixel int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); // Averaging R, G, and B int avg = (red+green+blue)/3; // Creating a new color object which has R=G=B=average // This is because the average will be a shade of gray Color colorGray = new Color(avg, avg, avg); // Setting the pixel&#39;s actual RGB content in the image to be the grayscaled version. img.setRGB(j, i, colorGray.getRGB()); } } // Writing the image out try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;graytort3&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } public void GreenScale() { BufferedImage img = null; // Reading file try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } // Iterating through all pixels for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { // For each pixel, getting RGB contents int pixel = img.getRGB(j, i); // Creating color object out of RGB contents for easy extraction Color color = new Color(pixel, true); // Using color object&#39;s methods to get the R, G, and B values for the pixel int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); // Averaging R, G, and B int avg = (green)/3; // Creating a new color object which has R=G=B=average // This is because the average will be a shade of gray Color colorGreen = new Color(avg, green, avg); // Setting the pixel&#39;s actual RGB content in the image to be the grayscaled version. img.setRGB(j, i, colorGreen.getRGB()); } } // Writing the image out try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;greentort3&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } public void RedScale() { BufferedImage img = null; // Reading file try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } // Iterating through all pixels for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { // For each pixel, getting RGB contents int pixel = img.getRGB(j, i); // Creating color object out of RGB contents for easy extraction Color color = new Color(pixel, true); // Using color object&#39;s methods to get the R, G, and B values for the pixel int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); // Averaging R, G, and B int avg = (red)/3; // Creating a new color object which has R=G=B=average // This is because the average will be a shade of gray Color colorRed = new Color(red, avg, avg); // Setting the pixel&#39;s actual RGB content in the image to be the grayscaled version. img.setRGB(j, i, colorRed.getRGB()); } } // Writing the image out try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;redtort3&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } public void BlueScale() { BufferedImage img = null; // Reading file try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } // Iterating through all pixels for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { // For each pixel, getting RGB contents int pixel = img.getRGB(j, i); // Creating color object out of RGB contents for easy extraction Color color = new Color(pixel, true); // Using color object&#39;s methods to get the R, G, and B values for the pixel int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); // Averaging R, G, and B int avg = (blue)/3; // Creating a new color object which has R=G=B=average // This is because the average will be a shade of gray Color colorBlue = new Color(avg, avg, blue); // Setting the pixel&#39;s actual RGB content in the image to be the grayscaled version. img.setRGB(j, i, colorBlue.getRGB()); } } // Writing the image out try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;bluetort3&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 200) { str = &quot;-&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 150) { str = &quot;/&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 90) { str = &quot;E&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;W&quot;; } else if (g &gt;= 40) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics tort3 = new Pics(&quot;tort3&quot;, &quot;png&quot;); tort3.GrayScale(); tort3.GreenScale(); tort3.BlueScale(); tort3.RedScale(); tort3.printStats(&quot;Original&quot;); tort3.resize(33); tort3.printStats(&quot;Scaled&quot;); tort3.convertToAscii(); } } Pics.main(null); . Original: 138359 600x600 images/tort3.png Scaled: 40217 198x198 images/tmp/tort3.png .",
            "url": "https://nathanshih04.github.io/NathanFP/2022/10/02/nathan-images.html",
            "relUrl": "/2022/10/02/nathan-images.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Zoo API Animal Data",
            "content": "import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://zoo-animals-api.p.rapidapi.com/animals/rand/10&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;80ed0e7619msh300fdfb6098c24cp160b71jsn6b8d978c56ec&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;zoo-animals-api.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); . [{&#34;name&#34;:&#34;Green Basilisk&#34;,&#34;latin_name&#34;:&#34;Basiliscus plumifrons&#34;,&#34;animal_type&#34;:&#34;Reptile&#34;,&#34;active_time&#34;:&#34;Diurnal&#34;,&#34;length_min&#34;:&#34;2&#34;,&#34;length_max&#34;:&#34;3&#34;,&#34;weight_min&#34;:&#34;0.5&#34;,&#34;weight_max&#34;:&#34;0.6&#34;,&#34;lifespan&#34;:&#34;10&#34;,&#34;habitat&#34;:&#34;Tropical rainforest&#34;,&#34;diet&#34;:&#34;Seeds, fruit, leaves, insects and other small animals&#34;,&#34;geo_range&#34;:&#34;Central America&#34;,&#34;image_link&#34;:&#34;https://upload.wikimedia.org/wikipedia/commons/f/f3/Green_Basilisk%2C_Alajuela%2C_Costa_Rica.jpg&#34;,&#34;id&#34;:80},{&#34;name&#34;:&#34;Matamata&#34;,&#34;latin_name&#34;:&#34;Chelus fimbriatus&#34;,&#34;animal_type&#34;:&#34;Reptile&#34;,&#34;active_time&#34;:&#34;Nocturnal&#34;,&#34;length_min&#34;:&#34;1.1&#34;,&#34;length_max&#34;:&#34;1.3&#34;,&#34;weight_min&#34;:&#34;35&#34;,&#34;weight_max&#34;:&#34;38&#34;,&#34;lifespan&#34;:&#34;30&#34;,&#34;habitat&#34;:&#34;Shallow pools and streams&#34;,&#34;diet&#34;:&#34;Fish&#34;,&#34;geo_range&#34;:&#34;Northern South America&#34;,&#34;image_link&#34;:&#34;https://upload.wikimedia.org/wikipedia/commons/7/7f/2009_Chelus_fimbriatus.JPG&#34;,&#34;id&#34;:116},{&#34;name&#34;:&#34;Bonobo&#34;,&#34;latin_name&#34;:&#34;Pan paniscus&#34;,&#34;animal_type&#34;:&#34;Mammal&#34;,&#34;active_time&#34;:&#34;Diurnal&#34;,&#34;length_min&#34;:&#34;2.3&#34;,&#34;length_max&#34;:&#34;2.8&#34;,&#34;weight_min&#34;:&#34;68&#34;,&#34;weight_max&#34;:&#34;86&#34;,&#34;lifespan&#34;:&#34;31&#34;,&#34;habitat&#34;:&#34;Tropical forest&#34;,&#34;diet&#34;:&#34;Fruit, seeds, leaves, flowers, fungi, eggs, and small animals&#34;,&#34;geo_range&#34;:&#34;Democratic Republic of the Congo&#34;,&#34;image_link&#34;:&#34;https://upload.wikimedia.org/wikipedia/commons/e/e2/Apeldoorn_Apenheul_zoo_Bonobo.jpg&#34;,&#34;id&#34;:44},{&#34;name&#34;:&#34;Timber Rattlesnake&#34;,&#34;latin_name&#34;:&#34;Crotalus horridus&#34;,&#34;animal_type&#34;:&#34;Reptile&#34;,&#34;active_time&#34;:&#34;Nocturnal&#34;,&#34;length_min&#34;:&#34;6&#34;,&#34;length_max&#34;:&#34;6.3&#34;,&#34;weight_min&#34;:&#34;1.1&#34;,&#34;weight_max&#34;:&#34;3.3&#34;,&#34;lifespan&#34;:&#34;20&#34;,&#34;habitat&#34;:&#34;Rocky hillsides, fields, woodlands and swamp&#34;,&#34;diet&#34;:&#34;Small mammals, birds, reptiles and amphibians&#34;,&#34;geo_range&#34;:&#34;Southeastern United States&#34;,&#34;image_link&#34;:&#34;https://upload.wikimedia.org/wikipedia/commons/f/fc/Adult_Crotalus_horridus.jpg&#34;,&#34;id&#34;:175},{&#34;name&#34;:&#34;Red River Hog&#34;,&#34;latin_name&#34;:&#34;Potamochoerus porcus&#34;,&#34;animal_type&#34;:&#34;Mammal&#34;,&#34;active_time&#34;:&#34;Diurnal&#34;,&#34;length_min&#34;:&#34;3.5&#34;,&#34;length_max&#34;:&#34;5&#34;,&#34;weight_min&#34;:&#34;100&#34;,&#34;weight_max&#34;:&#34;290&#34;,&#34;lifespan&#34;:&#34;15&#34;,&#34;habitat&#34;:&#34;Rainforest, forest and savanna woodland&#34;,&#34;diet&#34;:&#34;Primarily roots and bulbs, some other plant parts and small animals&#34;,&#34;geo_range&#34;:&#34;Western and central Africa&#34;,&#34;image_link&#34;:&#34;https://upload.wikimedia.org/wikipedia/commons/4/44/Pinselohrschwein_Potamochoerus_porcus_Tierpark_Hellabrunn-5.jpg&#34;,&#34;id&#34;:146},{&#34;name&#34;:&#34;Blue-Crowned Motmot&#34;,&#34;latin_name&#34;:&#34;Momotus momota&#34;,&#34;animal_type&#34;:&#34;Bird&#34;,&#34;active_time&#34;:&#34;Diurnal&#34;,&#34;length_min&#34;:&#34;1.1&#34;,&#34;length_max&#34;:&#34;1.3&#34;,&#34;weight_min&#34;:&#34;0.4&#34;,&#34;weight_max&#34;:&#34;0.5&#34;,&#34;lifespan&#34;:&#34;22&#34;,&#34;habitat&#34;:&#34;Rainforest&#34;,&#34;diet&#34;:&#34;Berries, fruits, insects and other small animals&#34;,&#34;geo_range&#34;:&#34;Northern South America&#34;,&#34;image_link&#34;:&#34;https://images.fineartamerica.com/images-medium-large-5/1-trinidad-motmot-blue-crowned-motmot-ken-archer.jpg&#34;,&#34;id&#34;:40},{&#34;name&#34;:&#34;White-Handed Gibbon&#34;,&#34;latin_name&#34;:&#34;Hylobates lar&#34;,&#34;animal_type&#34;:&#34;Mammal&#34;,&#34;active_time&#34;:&#34;Diurnal&#34;,&#34;length_min&#34;:&#34;1.42&#34;,&#34;length_max&#34;:&#34;1.92&#34;,&#34;weight_min&#34;:&#34;10&#34;,&#34;weight_max&#34;:&#34;17&#34;,&#34;lifespan&#34;:&#34;16&#34;,&#34;habitat&#34;:&#34;Tropical forest&#34;,&#34;diet&#34;:&#34;Fruits, leaves, insects, and flowers&#34;,&#34;geo_range&#34;:&#34;Southeast Asia&#34;,&#34;image_link&#34;:&#34;https://upload.wikimedia.org/wikipedia/commons/3/38/Hylobates_lar_pair_of_white_and_black_01.jpg&#34;,&#34;id&#34;:190},{&#34;name&#34;:&#34;Green and Black Poison Dart Frog&#34;,&#34;latin_name&#34;:&#34;Dendrobatus auratus&#34;,&#34;animal_type&#34;:&#34;Amphibian&#34;,&#34;active_time&#34;:&#34;Diurnal&#34;,&#34;length_min&#34;:&#34;1.5&#34;,&#34;length_max&#34;:&#34;2&#34;,&#34;weight_min&#34;:&#34;0.06&#34;,&#34;weight_max&#34;:&#34;0.065&#34;,&#34;lifespan&#34;:&#34;15&#34;,&#34;habitat&#34;:&#34;Tropical rainforest&#34;,&#34;diet&#34;:&#34;Insects, spiders, and other small invertebrates&#34;,&#34;geo_range&#34;:&#34;Central and South America&#34;,&#34;image_link&#34;:&#34;https://upload.wikimedia.org/wikipedia/commons/e/e2/Green_and_black_poison_dart_frog_at_Slimbridge_Wetland_Centre%2C_Gloucestershire%2C_England_arp.jpg&#34;,&#34;id&#34;:79},{&#34;name&#34;:&#34;Horned Puffin&#34;,&#34;latin_name&#34;:&#34;Fratercula corniculata&#34;,&#34;animal_type&#34;:&#34;Bird&#34;,&#34;active_time&#34;:&#34;Diurnal&#34;,&#34;length_min&#34;:&#34;1&#34;,&#34;length_max&#34;:&#34;1.2&#34;,&#34;weight_min&#34;:&#34;0.9&#34;,&#34;weight_max&#34;:&#34;1&#34;,&#34;lifespan&#34;:&#34;20&#34;,&#34;habitat&#34;:&#34;Ocean and rocky coasts&#34;,&#34;diet&#34;:&#34;Fish, mollusks and crustaceans&#34;,&#34;geo_range&#34;:&#34;Bering Sea, Arctic and North Pacific oceans&#34;,&#34;image_link&#34;:&#34;https://upload.wikimedia.org/wikipedia/commons/d/d8/Fratercula_corniculataUSFWSSL0002774.jpg&#34;,&#34;id&#34;:88},{&#34;name&#34;:&#34;Coquerel&#39;s Sifaka&#34;,&#34;latin_name&#34;:&#34;Propithecus coquereli&#34;,&#34;animal_type&#34;:&#34;Mammal&#34;,&#34;active_time&#34;:&#34;Diurnal&#34;,&#34;length_min&#34;:&#34;1.4&#34;,&#34;length_max&#34;:&#34;1.7&#34;,&#34;weight_min&#34;:&#34;7.5&#34;,&#34;weight_max&#34;:&#34;11&#34;,&#34;lifespan&#34;:&#34;11&#34;,&#34;habitat&#34;:&#34;Forest&#34;,&#34;diet&#34;:&#34;Leaves, fruit, and flowers&#34;,&#34;geo_range&#34;:&#34;Northwestern Madagascar&#34;,&#34;image_link&#34;:&#34;https://upload.wikimedia.org/wikipedia/commons/4/4e/Propithecus_coquereli_02.jpg&#34;,&#34;id&#34;:57}] .",
            "url": "https://nathanshih04.github.io/NathanFP/2022/10/02/nathan-api.html",
            "relUrl": "/2022/10/02/nathan-api.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Fibonacci",
            "content": "Base Code . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ abstract class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected abstract void init(); //{ // this.name = &quot;Stream&quot;; // Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) // .limit(this.size) // .forEach(f -&gt; this.setData(f[0]) ); // } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ } . Using For Loop . public class FiboForLoop extends Fibo{ // @Override overrides the Fibo init method so a different one can be used instead @Override public void init() { this.name = &quot;For Loop&quot;; // Hardcode for the first two numbers int fir = 1; int sec = 1; this.setData(0); this.setData(fir); this.setData(sec); int amount = this.size - 2; // for loop used to make the next term be the sum of the previous two terms. for(int i = 0; i &lt; amount; i++) { int holder = sec; sec = sec + fir; fir = holder; this.setData(sec); } } static public void main(String[] args){ FiboForLoop forLoop = new FiboForLoop(); forLoop.print(); } } FiboForLoop.main(null); . Init method = For Loop fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181], 20=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . Using While Loop . public class FiboWhileLoop extends Fibo{ // @Override overrides the Fibo init method so a different one can be used instead @Override public void init() { this.name = &quot;While Loop&quot;; // Hardcode for the first two numbers int fir = 1; int sec = 1; this.setData(0); this.setData(fir); this.setData(sec); int amount = this.size - 2; int i = 0; // while loop used to make the next term be the sum of teh previous two terms while(i &lt; amount) { int holder = sec; sec = sec + fir; fir = holder; this.setData(sec); i++; } } public static void main(String[] args){ FiboWhileLoop whileLoop = new FiboWhileLoop(); whileLoop.print(); } } FiboWhileLoop.main(null); . Init method = While Loop fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181], 20=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . Using Recursion . public class FiboRecursion extends Fibo{ // @Override overrides the Fibo init method so a different one can be used instead @Override public void init() { this.name = &quot;Recursion&quot;; // Iterating to show the whole sequence for (int i = 0; i &lt; this.size; i++){ this.setData(Recursively(i)); } } public static int Recursively(int size) { if (size &gt; 2) { // Calling the function over and over again inside of itself (recursion) return (Recursively(size - 1) + Recursively(size - 2)); } // base cases else if (size == 2) { return 1; } else if (size == 1) { return 1; } else { return 0; } } public static void main(String[] args){ FiboWhileLoop whileLoop = new FiboWhileLoop(); whileLoop.print(); } } FiboRecursion.main(null); . Init method = While Loop fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181], 20=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . CB Standards: . 1.B . Determined how to implement a while loop, for loop, and recursive function to accomplish fibonacci. . 4.C . Determined if all 3 algorithms returned the same result through the printed output being the same. . 5.A . For and while loops run in O(n) time since they run through the input size once and do a constant amount of operations for each loop. The recursive algorithm takes exponential time, however, since for each term of the sequence, the algorithm needs to recalculate all of the other terms as well due to the nature of recursion. .",
            "url": "https://nathanshih04.github.io/NathanFP/2022/09/20/nathan-fibonacci.html",
            "relUrl": "/2022/09/20/nathan-fibonacci.html",
            "date": " • Sep 20, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "3D Arrays (FRQ 1 Week Extra)",
            "content": "public class threeDimensional{ public static void main (String[] args){ int [][][] grades = { { {33, 66}, {55, 99} }, { {56, 93}, {89, 78} }, { {83, 96}, {73, 74} } }; for(int student = 0; student &lt; grades.length; student++){ System.out.println(&quot;Student Number &quot; + (student + 1)); for(int exam = 0; exam &lt; grades[student].length; exam++){ System.out.println(&quot;Exam Number &quot; + (exam + 1)); System.out.println(&quot;Grades are:&quot;); for(int marks = 0; marks &lt; grades[student][exam].length; marks++){ System.out.print(grades[student][exam][marks] + &quot; t&quot;); } System.out.println(); } System.out.println(); } } } threeDimensional.main(null); . Student Number 1 Exam Number 1 Grades are: 33 66 Exam Number 2 Grades are: 55 99 Student Number 2 Exam Number 1 Grades are: 56 93 Exam Number 2 Grades are: 89 78 Student Number 3 Exam Number 1 Grades are: 83 96 Exam Number 2 Grades are: 73 74 .",
            "url": "https://nathanshih04.github.io/NathanFP/2022/09/19/nathan-3DArray.html",
            "relUrl": "/2022/09/19/nathan-3DArray.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "FRQ 1 - 2019",
            "content": "This frq from 2019 deals with a calendar where you have to write two methods of the class in order to calculate the number of leap years between year1 and year2 inclusively as well as write a method that returns an integer representing the day of the week for the given date (month, day, year). . Part A . Write the static method numberOfLeapYears, which returns the number of leap years between year1 and year2, inclusive. In order to calculate this value, a helper method is provided for you. • isLeapYear(year) returns true if year is a leap year and false otherwise. Complete method numberOfLeapYears below. You must use isLeapYear appropriately to receive full credit. . // Part A solution public static int numberOfLeapYears(int year1, int year2){ int numLeapYears = 0; for(int i = year1; i &lt;= year2, i++){ if(isLeapYear(i)){ numLeapYears++; } } return numLeapYears; } . Part B . Write the static method dayOfWeek, which returns the integer value representing the day of the week for the given date (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. For example, 2019 began on a Tuesday, and January 5 is the fifth day of 2019. As a result, January 5, 2019, fell on a Saturday, and the method call dayOfWeek(1, 5, 2019) returns 6. As another example, January 10 is the tenth day of 2019. As a result, January 10, 2019, fell on a Thursday, and the method call dayOfWeek(1, 10, 2019) returns 4. In order to calculate this value, two helper methods are provided for you. • firstDayOfYear(year) returns the integer value representing the day of the week for the first day of year, where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. For example, since 2019 began on a Tuesday, firstDayOfYear(2019) returns 2. • dayOfYear(month, day, year) returns n, where month, day, and year specify the nth day of the year. For the first day of the year, January 1 (month = 1, day = 1), the value 1 is returned. This method accounts for whether year is a leap year. For example, dayOfYear(3, 1, 2017) returns 60, since 2017 is not a leap year, while dayOfYear(3, 1, 2016) returns 61, since 2016 is a leap year. Complete method dayOfWeek below. You must use firstDayOfYear and dayOfYear appropriately to receive full credit. . // Part B Solution public static int daysOfWeek(int month, int day, int year){ int firstDay = firstDayOfYear(year); int nth = dayOfYear(month, day, year); int returnDay = ((firstDay + nth) -1) % 7; return returnDay; } . Completed Code . public class APCalendar{ /** Returns true if year is a leap year and false otherwise. */ private static boolean isLeapYear(int year) { /* implementation not shown */ } /** Returns the number of leap years between year1 and year2, inclusive. * Precondition: 0 &lt;= year1 &lt;= year2 */ public static int numberOfLeapYears(int year1, int year2){ int numLeapYears = 0; for(int i = year1; i &lt;= year2, i++){ if(isLeapYear(i)){ numLeapYears++; } } return numLeapYears; } /** Returns the value representing the day of the week for the first day of year, * where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. */ private static int firstDayOfYear(int year) { /* implementation not shown */ } /** Returns n, where month, day, and year specify the nth day of the year. * Returns 1 for January 1 (month = 1, day = 1) of any year. * Precondition: The date represented by month, day, year is a valid date. */ private static int dayOfYear(int month, int day, int year) { /* implementation not shown */ } /** Returns the value representing the day of the week for the given date * (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., * and 6 denotes Saturday. * Precondition: The date represented by month, day, year is a valid date. */ public static int daysOfWeek(int month, int day, int year){ int firstDay = firstDayOfYear(year); int nth = dayOfYear(month, day, year); int returnDay = ((firstDay + nth) -1) % 7; return returnDay; } // There may be instance variables, constructors, and other methods not shown. } .",
            "url": "https://nathanshih04.github.io/NathanFP/2022/09/18/nathan-frq1.html",
            "relUrl": "/2022/09/18/nathan-frq1.html",
            "date": " • Sep 18, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Turtles ASCII Art and Arrays",
            "content": "class TurtleLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] turtles; /** * Constructor initializes a 2D array of Turtles */ public TurtleLoop() { //Storing Data in 2D arrays turtles = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Turtle 0 { &quot; _____&quot;, //[0][0] &quot; oo/&gt;&lt;&gt;&lt;&gt; &quot;, //[0][1] &quot;( -)&gt;&lt;&gt;&lt;&gt;&lt;&gt;&quot;, //[0][2] &quot; L|_|L|_|` &quot; //[0][3] }, //Turtle 1 { &quot; _____&quot;, //[1][0] &quot; ^^/xxxxx &quot;, //[1][1] &quot;( O)xxxxxxx&quot;, //[1][2] &quot; L|_|L|_|` &quot; //[1][3] }, //Turtle 2 { &quot; _____&quot;, //[2][0] &quot; uu/wwwww &quot;, //[2][1] &quot;( U)wwwwwww&quot;, //[2][2] &quot; L|_|L|_|` &quot; //[2][3] }, //Turtle 3 { &quot; _____&quot;, //[3][0] &quot; rr/nnnnn &quot;, //[3][1] &quot;( W)nnnnnnn&quot;, //[3][2] &quot; L|_|L|_|` &quot; //[3][3] }, //Turtle 4 { &quot; _____&quot;, //[4][0] &quot; cc/ooooo &quot;, //[4][1] &quot;( Y)ooooooo&quot;, //[4][2] &quot; L|_|L|_|` &quot; //[4][3] }, }; } /** * Loop and print turtles in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;The Tragedy of the turtle squad&quot;); // turtles (non-primitive) defined in constructor knows its length int turtleCount = turtles.length; for (int i = turtleCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of Turtles // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; turtle squad members left&quot;); //how many separate parts are there in a turtle turtle? for (int row = 0; row &lt; turtles[row].length; row++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each turtle part by part, will eventually print entire column*/ for (int col = 0; col &lt; turtleCount; col++) { // prints specific part of the turtle from the column System.out.print(turtles[col][row] + &quot; &quot;); } //this new line gives separation between each turtle System.out.println(); } //countdown for poem, decrementing turtleCount variable by 1 turtleCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;That was the tragedy of the turtle squad :(&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new TurtleLoop().printPoem(); //a new monkey list and output in one step } } TurtleLoop.main(null); . The Tragedy of the turtle squad 5 turtle squad members left _____ _____ _____ _____ _____ oo/&gt;&lt;&gt;&lt;&gt; ^^/xxxxx uu/wwwww rr/nnnnn cc/ooooo ( -)&gt;&lt;&gt;&lt;&gt;&lt;&gt; ( O)xxxxxxx ( U)wwwwwww ( W)nnnnnnn ( Y)ooooooo L|_|L|_|` L|_|L|_|` L|_|L|_|` L|_|L|_|` L|_|L|_|` 4 turtle squad members left _____ _____ _____ _____ oo/&gt;&lt;&gt;&lt;&gt; ^^/xxxxx uu/wwwww rr/nnnnn ( -)&gt;&lt;&gt;&lt;&gt;&lt;&gt; ( O)xxxxxxx ( U)wwwwwww ( W)nnnnnnn L|_|L|_|` L|_|L|_|` L|_|L|_|` L|_|L|_|` 3 turtle squad members left _____ _____ _____ oo/&gt;&lt;&gt;&lt;&gt; ^^/xxxxx uu/wwwww ( -)&gt;&lt;&gt;&lt;&gt;&lt;&gt; ( O)xxxxxxx ( U)wwwwwww L|_|L|_|` L|_|L|_|` L|_|L|_|` 2 turtle squad members left _____ _____ oo/&gt;&lt;&gt;&lt;&gt; ^^/xxxxx ( -)&gt;&lt;&gt;&lt;&gt;&lt;&gt; ( O)xxxxxxx L|_|L|_|` L|_|L|_|` 1 turtle squad members left _____ oo/&gt;&lt;&gt;&lt;&gt; ( -)&gt;&lt;&gt;&lt;&gt;&lt;&gt; L|_|L|_|` That was the tragedy of the turtle squad :( 0000000000000000000000000000000000 . class Turtle{ public Turtle(String turtleName, String[] turtleDraw){ this.name = turtleName; this.draw = turtleDraw; } String name; String[] draw; public void draw(){ for(int row = 0; row &lt; draw.length; row++){ System.out.println(draw[row]); } System.out.println(); } public static void main(String[] args){ String[] neutral = { &quot; _____&quot;, //[0][0] &quot; oo/&gt;&lt;&gt;&lt;&gt; &quot;, //[0][1] &quot;( -)&gt;&lt;&gt;&lt;&gt;&lt;&gt;&quot;, //[0][2] &quot; L|_|L|_|` &quot; //[0][3] }; String[] surprised = { &quot; _____&quot;, //[1][0] &quot; ^^/xxxxx &quot;, //[1][1] &quot;( O)xxxxxxx&quot;, //[1][2] &quot; L|_|L|_|` &quot; //[1][3] }; String[] happy = { &quot; _____&quot;, //[2][0] &quot; uu/wwwww &quot;, //[2][1] &quot;( U)wwwwwww&quot;, //[2][2] &quot; L|_|L|_|` &quot; //[2][3] }; String[] excited = { &quot; _____&quot;, //[3][0] &quot; rr/nnnnn &quot;, //[3][1] &quot;( W)nnnnnnn&quot;, //[3][2] &quot; L|_|L|_|` &quot; //[3][3] }; Turtle bob = new Turtle(&quot;bob&quot;, neutral); Turtle rick = new Turtle(&quot;rick&quot;, surprised); Turtle ted = new Turtle(&quot;ted&quot;, happy); Turtle john = new Turtle(&quot;john&quot;, excited); Turtle[] turtles = {bob, rick, ted, john}; for(int i = 0; i &lt; turtles.length; i++){ System.out.println(&quot;This is &quot; + turtles[i].name + &quot;: &quot;); turtles[i].draw(); } } } Turtle.main(null); . This is bob: _____ oo/&gt;&lt;&gt;&lt;&gt; ( -)&gt;&lt;&gt;&lt;&gt;&lt;&gt; L|_|L|_|` This is rick: _____ ^^/xxxxx ( O)xxxxxxx L|_|L|_|` This is ted: _____ uu/wwwww ( U)wwwwwww L|_|L|_|` This is john: _____ rr/nnnnn ( W)nnnnnnn L|_|L|_|` .",
            "url": "https://nathanshih04.github.io/NathanFP/2022/09/16/nathan-turtles.html",
            "relUrl": "/2022/09/16/nathan-turtles.html",
            "date": " • Sep 16, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Focus & Habits",
            "content": "Psychology and the Good Life . State of mind and quality of life have always been important to me throughout life. I believe that finding satisfaction in life is through balance. I know everything won&#39;t be rainbow and butterflies and there will definitely be hardship and struggle but I know that at least some aspects of life can be rainbow and butterflies. It all comes down to balance and I seek to have a positive outlook on life and enjoy every minute that I&#39;m on it. CODE CODE CODE! . Ways to Reduce Stress . I reduce stress by hopping on youtube and watching videos about fishing, cars, and a bunch of random stuff on the internet. Going down the rabbit holes of youtube is always fun for me and find myself watching videos about scaring goats for hours and hours. I also enjoy going outside and being in nature. Nothing really matters in nature except connecting with the outdoors and going back to our primal roots. However, the biggest stress reliever is going to the gym. All the anger that I have at stupid school is targetted into each rep at the gym. Each pound lifted is equivalent to each part of my immeasurable sadness that school and college apps give me. Each time I punch the bag at the gym is a direct hit at my crippling depression that Calculus BC gave me. . Positive Outlook . The key to find positivity in life is to seek the good and never stop loving turtles. :))))))))) .",
            "url": "https://nathanshih04.github.io/NathanFP/2022/09/11/nathan-focus&habits.html",
            "relUrl": "/2022/09/11/nathan-focus&habits.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Nathan Compliments Extra Notebook",
            "content": "import java.util.Scanner; . class Compliments { // Function that uses if, else if, and else to decide which compliment to print out. public void nice(int choice){ if(choice == 1){ System.out.println(&quot;You&#39;re pretty!&quot;); } else if(choice == 2){ System.out.println(&quot;You&#39;re strong!&quot;); } else if(choice == 3){ System.out.println(&quot;You&#39;re cool!&quot;); } else if(choice == 4){ System.out.println(&quot;You&#39;re smart!&quot;); } else{ System.out.println(&quot;You did not choose an option for a random compliment!&quot;); } } // Function that is converted to switch, case, and other to decide which insult to print out. public void mean(int choice){ switch(choice){ case 1: System.out.println(&quot;You&#39;re ugly!&quot;); break; case 2: System.out.println(&quot;You&#39;re weak!&quot;); break; case 3: System.out.println(&quot;You&#39;re lame!&quot;); break; case 4: System.out.println(&quot;You&#39;re dumb!&quot;); break; case 5: System.out.println(&quot;くコ:彡&quot;); break; default: System.out.println(&quot;You did not choose an option for a random insult!&quot;); } } } . // Objects created for Compliments class and Scanner for user input Compliments comp = new Compliments(); Scanner scan = new Scanner(System.in); // Prompts user to choose whether or not they want a compliment or insult and changes it into a boolean System.out.println(&quot;Input 1 for a compliment and anything else for an insult: &quot;); int compOrInsult = Integer.parseInt(scan.nextLine()); boolean decision; // compliment if(compOrInsult == 1){ decision = true; } // insult else{ decision = false; } // code block to prompt user to choose a random compliment if(decision){ System.out.println(&quot;Input 1-4 for a random compliment: &quot;); int rand = Integer.parseInt(scan.nextLine()); System.out.println(&quot;This was printed using if-elseif-else: &quot;); comp.nice(rand); } // code block to prompt user to choose a random insult else if(!decision){ System.out.println(&quot;Input 1-4 for a random compliment: &quot;); int rand = Integer.parseInt(scan.nextLine()); System.out.println(&quot;This was printed using switch-case-otherwise: &quot;); comp.mean(rand); } . Input 1 for a compliment and anything else for an insult: Input 1-4 for a random compliment: This was printed using if-elseif-else: You&#39;re cool! .",
            "url": "https://nathanshih04.github.io/NathanFP/2022/09/11/nathan-compliments.html",
            "relUrl": "/2022/09/11/nathan-compliments.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Nathan Bool and If Statements Notebook",
            "content": "if statement runs the code contained inside if the condition inside of the statement is satisfied . // set up variable boolean lights = true; // if the lights is set to true, it will print the statement if(lights == true){ System.out.println(&quot;The lights are on!&quot;); } // another way of doing the same thing using boolean expressions if(lights){ System.out.println(&quot;The lights are on!&quot;); } . The lights are on! The lights are on! . if-else statement runs the if statment first, but if that condition is not met, it will run whatever is in the else statement . // set up variable boolean lights = false; // if the lights is set to true, it will print the statement. Else the lights are off. if(lights == true){ System.out.println(&quot;The lights are on!&quot;); } else{ System.out.println(&quot;The lights are off!&quot;); } // another way of doing the same thing using boolean expressions (if lights are not false, meaning they are true) if(lights != false){ System.out.println(&quot;The lights are on!&quot;); } else{ System.out.println(&quot;The lights are off!&quot;); } . The lights are off! The lights are off! . if-elseif-else first checks to see if the if statement condition is met. If not, it will go through all else ifs and check until one of those conditions are met. If neither the if and else if statements are met, it will run the else statement. . // Setting variables to demonstrate if, else if, and else. boolean lights = true; boolean fan = true; // First checks if statement if(lights &amp;&amp; !fan){ System.out.println(&quot;The lights are on and the fan is off!&quot;); } // Goes down else ifs else if(!lights &amp;&amp; fan){ System.out.println(&quot;The lights are off and the fan is on!&quot;); } else if(!lights &amp;&amp; !fan){ System.out.println(&quot;The lights are off and the fan is off!&quot;); } else if(!lights || !fan){ System.out.println(&quot;Either the lights are off or the fan is off!&quot;); } // If none of the above run, else block will run else{ System.out.println(&quot;Both the lights and fan must be on!&quot;); } . Both the lights and fan must be on! . De Morgan&#39;s Law shows how we can remove an &amp;&amp; statement or remove an || statement. It&#39;s the way of creating equivalent statements by switching the &amp;&amp; or || and distributing the ! sign if you need. . // First demonstration System.out.println(&quot;First Demonstration:&quot;); boolean lights = true; boolean fan = true; // first way if(!(lights &amp;&amp; fan)){ System.out.println(&quot;Something is off!&quot;); } // second way if(!lights || !fan){ System.out.println(&quot;Something is off!&quot;); } // if one of the variables is set to true else{ System.out.println(&quot;Everything is on!&quot;); } // Second demonstration System.out.println(&quot;Second Demonstration:&quot;); boolean sink = false; boolean shower = false; // first way if(!(sink || shower)){ System.out.println(&quot;Everything is off!&quot;); } // second way if(!sink &amp;&amp; !shower){ System.out.println(&quot;Everything is off!&quot;); } else{ System.out.println(&quot;Something is on!&quot;); } // third demonstration System.out.println(&quot;Third Demonstration: &quot;); int num1 = 3; int num2 = 10; // first way System.out.println(!(num1 == 5 &amp;&amp; num2 != 5)); // second way System.out.println(num1 != 5 || num2 == 5); // Weird and confusing System.out.println(&quot;Overly complicated for no reason:&quot;); if((lights || !fan) || (sink &amp;&amp; shower)){ System.out.println(&quot;Either lights are on or fan is off, or sink and shower are on.&quot;); } . First Demonstration: Everything is on! Second Demonstration: Everything is off! Everything is off! Third Demonstration: true true Overly complicated for no reason: Either lights are on or fan is off, or sink and shower are on. .",
            "url": "https://nathanshih04.github.io/NathanFP/2022/09/10/nathan-boolandif.html",
            "relUrl": "/2022/09/10/nathan-boolandif.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Nathan Java Object Menu",
            "content": "import java.util.Scanner; import java.lang.Math; import java.util.Random; . class Guesser { public Guesser(){ this.playGame(); } // Random Number to 100 boolean check = false; Random rand = new Random(); int answer = rand.nextInt(100); public static void main(String[] args){ Guesser guessGame = new Guesser(); } // Function that checks whether or not the guess was correct public boolean checker(int guess, int ans){ if(guess == ans){ check = true; } return check; } public void playGame(){ Scanner scan = new Scanner(System.in); System.out.println(&quot;Input your guess: &quot;); int inp = Integer.parseInt(scan.nextLine()); boolean output = checker(inp, answer); while(output == false){ if(inp == 0){ break; } if(inp &lt; answer){ System.out.println(&quot;Wrong, you guessed &quot; + inp + &quot;, guess higher silly goose!&quot;); } if(inp &gt; answer){ System.out.println(&quot;Wrong, guessed &quot; + inp + &quot;, lower silly goose!&quot;); } System.out.println(&quot;Input your guess again: &quot;); inp = Integer.parseInt(scan.nextLine()); output = checker(inp, answer); } System.out.println(&quot;You got it right! The answer was: &quot; + answer); } } . class FlipCoin { public void coinFlip(int count){ Random rando = new Random(); for(int i = 0; i &lt; count; i++){ int side = rando.nextInt(2); if(side == 1){ System.out.println(&quot;Heads&quot;); } else{ System.out.println(&quot;Tails&quot;); } } } } . class Animals { // Function that uses if, else if, and else to decide which animal to print out. public void ifs(int choice){ // checks if statement first if(choice == 1){ System.out.println(&quot;ʕ •ᴥ•ʔ&quot;); } // runs down if else statement list else if(choice == 2){ System.out.println(&quot;εїз&quot;); } else if(choice == 3){ System.out.println(&quot;(=•́ܫ•̀=)&quot;); } else if(choice == 4){ System.out.println(&quot;˄·͈༝·͈˄&quot;); } else if(choice == 5){ System.out.println(&quot;くコ:彡&quot;); } // runs else block if nothing applies above else{ System.out.println(&quot;You did not choose an option for an animal :(&quot;); } } // Function that is converted to switch, case, and other to decide which animal to print out. public void switches(int choice){ // takes in choice and chooses the case based off of it switch(choice){ case 1: System.out.println(&quot;ʕ •ᴥ•ʔ&quot;); break; case 2: System.out.println(&quot;εїз&quot;); break; case 3: System.out.println(&quot;(=•́ܫ•̀=)&quot;); break; case 4: System.out.println(&quot;˄·͈༝·͈˄&quot;); break; case 5: System.out.println(&quot;くコ:彡&quot;); break; // Otherwise case: same as else default: System.out.println(&quot;You did not choose an option for an animal :(&quot;); } } } . class Turtle{ public void weight(int weight){ System.out.println(&quot;I weigh &quot; + weight + &quot; pounds!&quot;); } public void name(String name){ System.out.println(&quot;My name is &quot; + name + &quot;!&quot;); } } . class RussianTort extends Turtle{ public void terrain(){ System.out.println(&quot;I live on land!&quot;); } } . public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Number guessing game&quot;); System.out.println(&quot;2 - Coinflipper&quot;); System.out.println(&quot;3 - Loading in color&quot;); System.out.println(&quot;4 - Learn about Shellby&quot;); System.out.println(&quot;5 - See animals&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: Guesser guess = new Guesser(); guess.playGame(); break; case 2: FlipCoin flip = new FlipCoin(); int flips = 10; flip.coinFlip(flips); break; case 3: System.out.print(&quot;Loading...&quot;); for (int i = 0; i &lt; 20; i++) { // fixed length loading bar int random = (int) (Math.random() * COLORS.length); // random logic try { Thread.sleep(100); // delay for loading } catch (Exception e) { System.out.println(e); } System.out.print(COLORS[random][ANSI] + &quot;#&quot;); } break; case 4: RussianTort shellby = new RussianTort(); shellby.weight(1); shellby.name(&quot;Shellby&quot;); shellby.terrain(); break; case 5: Scanner animal = new Scanner(System.in); System.out.println(&quot;Input 1 for koala, 2 for butterfly, 3 for cat, 4 for bird, and 5 for squid: &quot;); int animalChoice = Integer.parseInt(animal.nextLine()); Animals animalObj = new Animals(); System.out.println(&quot;This was printed using if-elseif-else: &quot;); animalObj.ifs(animalChoice); System.out.println(&quot;This was printed using switch-case-otherwise: &quot;); animalObj.switches(animalChoice); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Number guessing game 2 - Coinflipper 3 - Loading in color 4 - Learn about Shellby 5 - See animals 0 - Quit - 5: Input 1 for koala, 2 for butterfly, 3 for cat, 4 for bird, and 5 for squid: This was printed using if-elseif-else: ʕ •ᴥ•ʔ This was printed using switch-case-otherwise: ʕ •ᴥ•ʔ 5: Input 1 for koala, 2 for butterfly, 3 for cat, 4 for bird, and 5 for squid: This was printed using if-elseif-else: εїз This was printed using switch-case-otherwise: εїз 5: Input 1 for koala, 2 for butterfly, 3 for cat, 4 for bird, and 5 for squid: This was printed using if-elseif-else: (=•́ܫ•̀=) This was printed using switch-case-otherwise: (=•́ܫ•̀=) 5: Input 1 for koala, 2 for butterfly, 3 for cat, 4 for bird, and 5 for squid: This was printed using if-elseif-else: ˄·͈༝·͈˄ This was printed using switch-case-otherwise: ˄·͈༝·͈˄ 5: Input 1 for koala, 2 for butterfly, 3 for cat, 4 for bird, and 5 for squid: This was printed using if-elseif-else: くコ:彡 This was printed using switch-case-otherwise: くコ:彡 5: Input 1 for koala, 2 for butterfly, 3 for cat, 4 for bird, and 5 for squid: This was printed using if-elseif-else: You did not choose an option for an animal :( This was printed using switch-case-otherwise: You did not choose an option for an animal :( 0: Goodbye, World! .",
            "url": "https://nathanshih04.github.io/NathanFP/2022/09/02/nathan-javaobject.html",
            "relUrl": "/2022/09/02/nathan-javaobject.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "College Board Info",
            "content": "Week 9: . Week 8: POJO and ArrayList . ArrayList POJO . Week 4: FRQ 1 . Turtles Code, FRQ 2019, and Extra Three Dimensional Array . Week 3: Backend Development . If Statement and Boolean NB, If Statement and Switch Case Integrated Into Menu NB, and Extra Compliment Code Demonstrating If and Switch NB . Week 2: Innovation Using Objects . Object Menu NB . Week 1: Primitive Types . Primitive Type NB .",
            "url": "https://nathanshih04.github.io/NathanFP/2022/08/28/nathan-CollegeBoard.html",
            "relUrl": "/2022/08/28/nathan-CollegeBoard.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Bash Stuff",
            "content": "realpath . jupyter kernelspec list python --version conda --version . /home/nathanshih04/NathanFP/_notebooks Available kernels: bash /home/nathanshih04/.local/share/jupyter/kernels/bash java /home/nathanshih04/.local/share/jupyter/kernels/java javascript /home/nathanshih04/.local/share/jupyter/kernels/javascript python3 /home/nathanshih04/.local/share/jupyter/kernels/python3 Python 3.9.12 conda 4.13.0 .",
            "url": "https://nathanshih04.github.io/NathanFP/jupyter/2022/08/25/nathan-pythonBash.html",
            "relUrl": "/jupyter/2022/08/25/nathan-pythonBash.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Java Primitive Guesser Game",
            "content": "import java.util.Scanner; import java.util.Random; . public class Guesser{ public Guesser(){ this.playGame(); } // Random Number to 100 boolean check = false; Random rand = new Random(); int answer = rand.nextInt(100); public static void main(String[] args){ Guesser guessGame = new Guesser(); } // Function that checks whether or not the guess was correct public boolean checker(int guess, int ans){ if(guess == ans){ check = true; } return check; } public void playGame(){ Scanner scan = new Scanner(System.in); System.out.println(&quot;Input your guess: &quot;); int inp = Integer.parseInt(scan.nextLine()); boolean output = checker(inp, answer); while(output == false){ if(inp &lt; answer){ System.out.println(&quot;Wrong, guess higher silly goose!&quot;); } if(inp &gt; answer){ System.out.println(&quot;Wrong, guess lower silly goose!&quot;); } System.out.println(&quot;Input your guess again: &quot;); inp = Integer.parseInt(scan.nextLine()); output = checker(inp, answer); } System.out.println(&quot;You got it right! The answer was: &quot; + answer); } } Guesser.main(null); . Input your guess: Wrong, guess higher silly goose! Input your guess again: Wrong, guess higher silly goose! Input your guess again: Wrong, guess higher silly goose! Input your guess again: Wrong, guess lower silly goose! Input your guess again: Wrong, guess higher silly goose! Input your guess again: Wrong, guess higher silly goose! Input your guess again: Wrong, guess lower silly goose! Input your guess again: Wrong, guess lower silly goose! Input your guess again: You got it right! The answer was: 92 .",
            "url": "https://nathanshih04.github.io/NathanFP/2022/08/24/nathan-javaPrim.html",
            "relUrl": "/2022/08/24/nathan-javaPrim.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Python Notebook",
            "content": "print(&#39;hello world&#39;) . hello world .",
            "url": "https://nathanshih04.github.io/NathanFP/2022/08/22/nathan-python.html",
            "relUrl": "/2022/08/22/nathan-python.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Java Coin Flip",
            "content": "import java.util.Random; int flipCount = 10; . public void coinFlip(int count){ Random rando = new Random(); for(int i = 0; i &lt; count; i++){ int side = rando.nextInt(2); if(side == 1){ System.out.println(&quot;Heads&quot;); } else{ System.out.println(&quot;Tails&quot;); } } } . coinFlip(flipCount); . Heads Tails Heads Tails Tails Heads Heads Tails Heads Heads .",
            "url": "https://nathanshih04.github.io/NathanFP/2022/08/21/nathan-java.html",
            "relUrl": "/2022/08/21/nathan-java.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Firstpost",
            "content": "First post! .",
            "url": "https://nathanshih04.github.io/NathanFP/2022/08/21/FirstPost.html",
            "relUrl": "/2022/08/21/FirstPost.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://nathanshih04.github.io/NathanFP/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post27": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://nathanshih04.github.io/NathanFP/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://nathanshih04.github.io/NathanFP/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://nathanshih04.github.io/NathanFP/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}